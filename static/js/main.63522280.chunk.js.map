{"version":3,"sources":["dataStructures/heap.js","algorithms/dijkstra.js","visualizer/Visualizer.jsx","visualizer/Wrapper.jsx","heapVisualizer/HeapBlock.jsx","App.js","serviceWorker.js","index.js"],"names":["MinHeap","heap","this","set","Set","array","element","insert","num","has","push","add","length","index","distance","Math","floor","pop","smallest","left","right","temp","undefined","getNeighbors","node","grid","neighbors","col","row","filter","neighbor","isVisited","Visualizer","staticgrid","state","visitedNodesInOrder","nodesInShortestPathOrder","mousedown","reset","a","obj","i","contains","pos","getInitialGrid","setState","oldgrid","startNode","finishNode","start","Date","getTime","unvisitedNodes","closestNode","remove","isWall","Infinity","previousNode","dijkstra","dur","console","log","currentNode","unshift","getNodesInShortestPathOrder","onClick","visualizeDijkstra","props","className","map","rowIdx","key","nodeIdx","isFinish","isStart","isPath","getIndex","wallIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","delay","Component","currentRow","Node","createNode","extraClassName","visited","pathAnimated","setTimeout","switch","switchPath","id","onMouseDown","beWall","onMouseUp","onMouseOver","Wrapper","HeapBlock","finalarray","resizefactor","width","height","permitOverflow","random","value","lastelementchecked","offsetHeight","scrollHeight","offsetWidth","scrollWidth","style","display","overflowX","ref","el","fillTree","removeSmallest","flexDirection","colidx","color","Col","alignItems","justifyContent","App","Navbar","bg","variant","Brand","href","Nav","Link","Form","inline","FormControl","type","placeholder","Button","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.63522280.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    constructor() {\r\n        this.heap = [null];\r\n        this.set = new Set(null)\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    insert(num) {\r\n        if (this.set.has(num)) return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    remove() {\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                return this.heap.pop()\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance >= this.heap[left].distance || this.heap[index].distance >= this.heap[right].distance) {\r\n                    if (this.heap[left].distance <= this.heap[right].distance) {\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n                    } else {\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return smallest;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes = new MinHeap();\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length > 1) {\r\n        const closestNode = unvisitedNodes.remove();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = closestNode.distance + 1;\r\n            neighbor.previousNode = closestNode;\r\n            unvisitedNodes.insert(neighbor)\r\n        }\r\n    }\r\n}\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\n\r\nconst START_NODE_ROW = 7;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 16;\r\nconst FINISH_NODE_COL = 35;\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid = []\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder: [],\r\n            mousedown: false,\r\n            reset: false\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    getIndex(array, element) {\r\n        if (array)\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i] === element) {\r\n                    return i\r\n                }\r\n            }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid = grid\r\n    }\r\n    visualizeDijkstra() {\r\n        const oldgrid = Visualizer.staticgrid\r\n        this.setState({ oldgrid })\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    wallIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWall = !Visualizer.staticgrid[row][col].isWall\r\n    }\r\n    handleDown() {\r\n        this.setState({ mousedown: true });\r\n    }\r\n    handleUp() {\r\n        this.setState({ mousedown: false });\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder, nodesInShortestPathOrder, mousedown } = this.state;\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </button>\r\n                <button onClick={() => this.props.reset()}>\r\n                    Clear Board\r\n            </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div className=\"row\" key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, isFinish, isStart, isWall, isVisited } = node;\r\n                                    let isPath = this.getIndex(nodesInShortestPathOrder, node)\r\n                                    if (!!isPath) {\r\n                                        isPath += visitedNodesInOrder.length\r\n                                    }\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            col={col}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            row={row}\r\n                                            isVisited={isVisited}\r\n                                            isPath={isPath}\r\n                                            wallIt={this.wallIt}\r\n                                            mousedown={mousedown}\r\n                                            mousedownHandle={() => this.handleDown()}\r\n                                            mouseUpHandle={() => this.handleUp()}\r\n                                            delay={this.getIndex(visitedNodesInOrder, node)}\r\n                                        ></Node>\r\n                                    );\r\n\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            const Node = createNode(col, row);\r\n            currentRow.push(Node);\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\nexport class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n        {\r\n            extraClassName: this.props.isFinish\r\n                ? 'node-finish'\r\n                : this.props.isStart\r\n                    ? 'node-start'\r\n                    : this.props.isWall\r\n                        ? 'node-wall'\r\n                        : '',\r\n            visited: false,\r\n            pathAnimated: false,\r\n            isWall: this.props.isWall\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-visited',\r\n                visited: true\r\n            })\r\n        }, this.props.delay);\r\n    }\r\n    switchPath() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-shortest-path',\r\n                pathAnimated: true\r\n            })\r\n        }, this.props.isPath);\r\n    }\r\n    beWall() {\r\n        if (this.state.isWall) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWall: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-wall',\r\n                isWall: true\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            wallIt,\r\n            mousedownHandle,\r\n            mouseUpHandle,\r\n            row,\r\n        } = this.props;\r\n        if (this.props.isVisited && this.state.visited === false) {\r\n            this.switch()\r\n        }\r\n        if (this.props.isPath !== false && this.state.pathAnimated === false) {\r\n            this.switchPath()\r\n        }\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${this.state.extraClassName}`}\r\n                onMouseDown={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish) {\r\n                        this.beWall();\r\n                        wallIt(row, col);\r\n                        mousedownHandle();\r\n                    }\r\n                }}\r\n                onMouseUp={() => mouseUpHandle()}\r\n                onMouseOver={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish)\r\n                        if (this.props.mousedown) {\r\n                            this.beWall();\r\n                            wallIt(row, col);\r\n                        }\r\n                }}\r\n\r\n            ></div>\r\n        );\r\n    }\r\n}  \r\n","\r\nimport React, { Component } from 'react';\r\nimport Visualizer from './Visualizer';\r\nexport default class Wrapper extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            reset: false,\r\n        }\r\n    }\r\n    reset() {\r\n\r\n        this.setState({\r\n            reset: true\r\n        })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.reset) {\r\n            this.setState({ reset: false })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            !this.state.reset ? <Visualizer reset={() => this.reset()}></Visualizer> : null\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './HeapBlock.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport MinHeap from '../dataStructures/heap';\r\n\r\nexport default class HeapBlock extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            finalarray: [],\r\n            resizefactor: 1,\r\n            width: 120,\r\n            height: 100,\r\n            permitOverflow: true,\r\n            heap: new MinHeap()\r\n        }\r\n    }\r\n    fillTree() {\r\n\r\n        const array = this.state.heap.heap\r\n        let num = Math.floor(Math.random() * 10)\r\n        this.state.heap.insert({ distance: num })\r\n        console.log(array)\r\n        const finalarray = [[{ value: array[1], pos: 1 }]]\r\n        for (let i = 1; i < array.length; i++) {\r\n            let lastelementchecked = false;\r\n            finalarray.push([])\r\n            for (let element of finalarray[i - 1]) {\r\n                finalarray[i].push({ value: array[element.pos * 2], pos: element.pos * 2 })\r\n                finalarray[i].push({ value: array[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 == array.length - 1 || element.pos * 2 == array.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        console.log(finalarray)\r\n        this.setState({ heap: this.state.heap, finalarray: finalarray })\r\n    }\r\n    removeSmallest() {\r\n        this.state.heap.remove()\r\n        const array = this.state.heap.heap\r\n        const finalarray = [[{ value: array[1], pos: 1 }]]\r\n        for (let i = 1; i < array.length; i++) {\r\n            let lastelementchecked = false;\r\n            finalarray.push([])\r\n            for (let element of finalarray[i - 1]) {\r\n                finalarray[i].push({ value: array[element.pos * 2], pos: element.pos * 2 })\r\n                finalarray[i].push({ value: array[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 == array.length - 1 || element.pos * 2 == array.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        console.log(finalarray)\r\n        this.setState({ heap: this.state.heap, finalarray: finalarray })\r\n    }\r\n    componentDidUpdate() {\r\n        const element = this.element;\r\n        // Things involving accessing DOM properties on element\r\n        // In the case of what this question actually asks:\r\n        const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\r\n            element.offsetWidth < element.scrollWidth;\r\n        if (hasOverflowingChildren && this.state.permitOverflow) {\r\n            const resizefactor = this.state.resizefactor * 0.9\r\n            const width = resizefactor * 120\r\n            const height = resizefactor * 100\r\n            if (width <= 30) {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: 30, height: 27, permitOverflow: false })\r\n\r\n            } else {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: width, height: height })\r\n\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        const { finalarray, width, height } = this.state\r\n\r\n        return (\r\n\r\n            <div style={{\r\n                width: \"100%\",\r\n                display: \"inline-block\",\r\n                overflowX: \"auto\"\r\n            }} ref={(el) => { this.element = el }}>\r\n\r\n                <button onClick={() => this.fillTree()}>\r\n                    Add to Heap\r\n            </button>\r\n                <button onClick={() => this.removeSmallest()}>\r\n                    Remove smallest number from Heap\r\n            </button>\r\n                {finalarray.map((row, rowIdx) => {\r\n                    //const size = finalarray[finalarray.length - 1].length * 150\r\n                    return (\r\n                        <div style={{\r\n                            display: \"flex\",\r\n                            flexDirection: \"row\",\r\n                            //width: `1000px`\r\n\r\n                        }}>\r\n                            {\r\n                                row.map((col, colidx) => {\r\n                                    let color = \"red\"\r\n                                    let value = undefined\r\n                                    if (col.value == undefined) {\r\n                                        color = \"\"\r\n                                    } else {\r\n                                        value = col.value.distance\r\n                                    }\r\n                                    return (\r\n                                        <Col style={{\r\n                                            display: 'flex',\r\n                                            alignItems: 'center',\r\n                                            justifyContent: 'center',\r\n                                        }}>\r\n                                            <div style={{\r\n                                                width: `${width}px`,\r\n                                                height: `${height}px`,\r\n                                                \"backgroundColor\": `${color}`,\r\n                                                \"borderRadius\": \"200px\"\r\n                                            }}>{value}</div>\r\n\r\n                                        </Col>\r\n\r\n                                    )\r\n                                })}\r\n                        </div>\r\n\r\n                    )\r\n\r\n                })}\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './visualizer/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport HeapBlock from './heapVisualizer/HeapBlock';\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/pathfinding\">PathFinding</Nav.Link>\n            <Nav.Link href=\"/sorting\">Sorting</Nav.Link>\n            <Nav.Link href=\"/datastructures\">Data Structures</Nav.Link>\n          </Nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-info\">Search</Button>\n          </Form>\n        </Navbar>\n        <div style={{ \"backgroundColor\": \"#282c34\" }}>\n\n        </div>\n\n        <header className=\"App-header\">\n          <Route\n            path=\"/sorting\"\n            component={HeapBlock}\n            exact\n          />\n          <Route\n            path=\"/pathfinding\"\n            component={Wrapper}\n            exact\n          />\n        </header>\n\n      </div>\n    </Router >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}