{"version":3,"sources":["dataStructures/heap.js","algorithms/dijkstra.js","visualizer/Visualizer.jsx","visualizer/Wrapper.jsx","heapVisualizer/HeapElement.jsx","heapVisualizer/HeapBlock.jsx","App.js","serviceWorker.js","index.js"],"names":["MinHeap","heap","this","set","Set","array","element","insert","currentheap","push","num","actions","has","add","oldarray","copy","action","length","index","distance","Math","floor","element1","element2","result","pop","smallest","left","right","temp","console","log","undefined","getNeighbors","node","grid","neighbors","col","row","filter","neighbor","isVisited","Visualizer","staticgrid","state","visitedNodesInOrder","nodesInShortestPathOrder","mousedown","reset","a","obj","i","contains","pos","getInitialGrid","setState","oldgrid","startNode","finishNode","start","Date","getTime","unvisitedNodes","closestNode","remove","isWall","Infinity","previousNode","dijkstra","dur","currentNode","unshift","getNodesInShortestPathOrder","onClick","visualizeDijkstra","props","className","map","rowIdx","key","nodeIdx","isFinish","isStart","isPath","getIndex","wallIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","delay","Component","currentRow","Node","createNode","extraClassName","visited","pathAnimated","setTimeout","switch","switchPath","id","onMouseDown","beWall","onMouseUp","onMouseOver","Wrapper","HeapElement","value","width","height","color","isSelected","toBeSwappedWith","switchtoRemoved","style","HeapBlock","initialheap","finalarray","resizefactor","permitOverflow","selected","swappedElements","elementAdded","random","lastelementchecked","initialarray","shift","level","log2","position","pow","offsetHeight","scrollHeight","offsetWidth","scrollWidth","currentAction","level1","position1","level2","position2","selected1","selected2","colIdx","newvalue","display","overflowX","ref","el","fillTree","removeSmallest","elements","flexDirection","colidx","Col","alignItems","justifyContent","App","Navbar","bg","variant","Brand","href","Nav","Link","Form","inline","FormControl","type","placeholder","Button","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e06a670.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    constructor() {\r\n        this.heap = [null];\r\n        this.set = new Set(null)\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    copy() {\r\n        let currentheap = []\r\n        for (let element of this.heap) {\r\n            currentheap.push(element);\r\n        }\r\n        return currentheap\r\n    }\r\n    insert(num) {\r\n        let actions = []\r\n        if (this.set.has(num)) return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    const currentheap = this.copy()\r\n                    actions.push({ action: \"swap\", element1: Math.floor(index / 2), element2: index, currentheap: currentheap })\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        return actions;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n    remove() {\r\n        let actions = []\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                const currentheap = this.copy()\r\n                actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n                let result = { actions: actions, result: this.heap.pop() }\r\n                return result\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let currentheap = this.copy()\r\n            actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n                    const currentheap = this.copy()\r\n                    actions.push({ action: \"swap\", element1: 1, element2: 2, currentheap: currentheap })\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance >= this.heap[left].distance || this.heap[index].distance >= this.heap[right].distance) {\r\n                    if (this.heap[left].distance <= this.heap[right].distance) {\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n                        const currentheap = this.copy()\r\n                        console.log(index)\r\n                        actions.push({ action: \"swap\", element1: index, element2: left, currentheap: currentheap })\r\n                    } else {\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n                        const currentheap = this.copy()\r\n                        console.log(index)\r\n                        actions.push({ action: \"swap\", element1: index, element2: right, currentheap: currentheap })\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            currentheap = this.copy()\r\n            actions.push({ action: \"settle\", currentheap: currentheap })\r\n            let result = { actions: actions, result: smallest }\r\n            return result\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes = new MinHeap();\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length > 1) {\r\n        const closestNode = unvisitedNodes.remove();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = closestNode.distance + 1;\r\n            neighbor.previousNode = closestNode;\r\n            unvisitedNodes.insert(neighbor)\r\n        }\r\n    }\r\n}\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\n\r\nconst START_NODE_ROW = 7;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 16;\r\nconst FINISH_NODE_COL = 35;\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid = []\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder: [],\r\n            mousedown: false,\r\n            reset: false\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    getIndex(array, element) {\r\n        if (array)\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i] === element) {\r\n                    return i\r\n                }\r\n            }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid = grid\r\n    }\r\n    visualizeDijkstra() {\r\n        const oldgrid = Visualizer.staticgrid\r\n        this.setState({ oldgrid })\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    wallIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWall = !Visualizer.staticgrid[row][col].isWall\r\n    }\r\n    handleDown() {\r\n        this.setState({ mousedown: true });\r\n    }\r\n    handleUp() {\r\n        this.setState({ mousedown: false });\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder, nodesInShortestPathOrder, mousedown } = this.state;\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </button>\r\n                <button onClick={() => this.props.reset()}>\r\n                    Clear Board\r\n            </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row, rowIdx) => {\r\n                        return (\r\n                            <div className=\"row\" key={rowIdx}>\r\n                                {row.map((node, nodeIdx) => {\r\n                                    const { row, col, isFinish, isStart, isWall, isVisited } = node;\r\n                                    let isPath = this.getIndex(nodesInShortestPathOrder, node)\r\n                                    if (!!isPath) {\r\n                                        isPath += visitedNodesInOrder.length\r\n                                    }\r\n                                    return (\r\n                                        <Node\r\n                                            key={nodeIdx}\r\n                                            col={col}\r\n                                            isFinish={isFinish}\r\n                                            isStart={isStart}\r\n                                            isWall={isWall}\r\n                                            row={row}\r\n                                            isVisited={isVisited}\r\n                                            isPath={isPath}\r\n                                            wallIt={this.wallIt}\r\n                                            mousedown={mousedown}\r\n                                            mousedownHandle={() => this.handleDown()}\r\n                                            mouseUpHandle={() => this.handleUp()}\r\n                                            delay={this.getIndex(visitedNodesInOrder, node)}\r\n                                        ></Node>\r\n                                    );\r\n\r\n                                })}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            const Node = createNode(col, row);\r\n            currentRow.push(Node);\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\nexport class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n        {\r\n            extraClassName: this.props.isFinish\r\n                ? 'node-finish'\r\n                : this.props.isStart\r\n                    ? 'node-start'\r\n                    : this.props.isWall\r\n                        ? 'node-wall'\r\n                        : '',\r\n            visited: false,\r\n            pathAnimated: false,\r\n            isWall: this.props.isWall\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-visited',\r\n                visited: true\r\n            })\r\n        }, this.props.delay);\r\n    }\r\n    switchPath() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-shortest-path',\r\n                pathAnimated: true\r\n            })\r\n        }, this.props.isPath);\r\n    }\r\n    beWall() {\r\n        if (this.state.isWall) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWall: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-wall',\r\n                isWall: true\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            wallIt,\r\n            mousedownHandle,\r\n            mouseUpHandle,\r\n            row,\r\n        } = this.props;\r\n        if (this.props.isVisited && this.state.visited === false) {\r\n            this.switch()\r\n        }\r\n        if (this.props.isPath !== false && this.state.pathAnimated === false) {\r\n            this.switchPath()\r\n        }\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${this.state.extraClassName}`}\r\n                onMouseDown={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish) {\r\n                        this.beWall();\r\n                        wallIt(row, col);\r\n                        mousedownHandle();\r\n                    }\r\n                }}\r\n                onMouseUp={() => mouseUpHandle()}\r\n                onMouseOver={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish)\r\n                        if (this.props.mousedown) {\r\n                            this.beWall();\r\n                            wallIt(row, col);\r\n                        }\r\n                }}\r\n\r\n            ></div>\r\n        );\r\n    }\r\n}  \r\n","\r\nimport React, { Component } from 'react';\r\nimport Visualizer from './Visualizer';\r\nexport default class Wrapper extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            reset: false,\r\n        }\r\n    }\r\n    reset() {\r\n\r\n        this.setState({\r\n            reset: true\r\n        })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.reset) {\r\n            this.setState({ reset: false })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            !this.state.reset ? <Visualizer reset={() => this.reset()}></Visualizer> : null\r\n        )\r\n    }\r\n}","\r\nimport React, { Component } from 'react';\r\n\r\nexport default class HeapElement extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            color: this.props.color,\r\n            isSelected: this.props.isSelected,\r\n            toBeSwappedWith: this.props.toBeSwappedWith,\r\n            remove: this.props.remove\r\n        }\r\n\r\n    }\r\n    switch() {\r\n        setTimeout((toBeSwappedWith) => {\r\n            const value = this.state.toBeSwappedWith ? this.state.toBeSwappedWith.value : this.state.value\r\n            this.setState({\r\n                color: \"brown\",\r\n                value: value,\r\n                toBeSwappedWith: undefined,\r\n                isSelected: false\r\n            })\r\n        }, 500);\r\n\r\n    }\r\n    switchtoRemoved() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                value: undefined,\r\n                color: \"\",\r\n                remove: false\r\n            })\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        let { value, width, height, color, isSelected, toBeSwappedWith, remove } = this.state\r\n        if (remove) {\r\n            color = \"red\";\r\n            this.switchtoRemoved()\r\n        }\r\n        if (isSelected && value !== undefined) {\r\n            color = \"blue\"\r\n            this.switch(toBeSwappedWith)\r\n        }\r\n        // else if (isSelected && this.state.isSelected && value) {\r\n        //     this.switch()\r\n        // }\r\n        if (value === undefined)\r\n            color = \"\"\r\n        return (\r\n            <div style={{\r\n                width: `${width}px`,\r\n                height: `${height}px`,\r\n                \"backgroundColor\": `${color}`,\r\n                \"borderRadius\": \"200px\"\r\n            }}>{this.state.value}</div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport './HeapBlock.css';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport MinHeap from '../dataStructures/heap';\r\nimport HeapElement from './HeapElement';\r\n\r\nexport default class HeapBlock extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            initialheap: [],\r\n            finalarray: [],\r\n            resizefactor: 1,\r\n            width: 120,\r\n            height: 100,\r\n            permitOverflow: true,\r\n            heap: new MinHeap(),\r\n            actions: [],\r\n            selected: [],\r\n            swappedElements: [],\r\n            elementAdded: {},\r\n            remove: false\r\n        }\r\n    }\r\n    fillTree() {\r\n        const array = this.state.heap.heap\r\n        let num = Math.floor(Math.random() * 10)\r\n        let actions = this.state.heap.insert({ distance: num })\r\n        const finalarray = [[{ value: array[1], pos: 1 }]]\r\n        for (let i = 1; i < array.length; i++) {\r\n            let lastelementchecked = false;\r\n            finalarray.push([])\r\n            for (let element of finalarray[i - 1]) {\r\n                finalarray[i].push({ value: array[element.pos * 2], pos: element.pos * 2 })\r\n                finalarray[i].push({ value: array[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 == array.length - 1 || element.pos * 2 == array.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        const initialarray = actions.shift().element\r\n        const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n        let pos = []\r\n        for (let i = 1; i < initialarray.length; i++) {\r\n            let lastelementchecked = false;\r\n            initialheap.push([])\r\n            for (let element of initialheap[i - 1]) {\r\n                initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 == initialarray.length - 1 || element.pos * 2 == initialarray.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ remove: false, heap: this.state.heap, finalarray: finalarray, actions: actions, initialheap: initialheap, selected: [initialheap[level][position]] })\r\n    }\r\n    removeSmallest() {\r\n\r\n        let actions = this.state.heap.remove().actions\r\n        console.log(actions)\r\n        const initialarray = actions.shift().element\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ selected: [this.state.initialheap[level][position]], remove: true, actions: actions })\r\n\r\n        const array = this.state.heap.heap\r\n        const finalarray = [[{ value: array[1], pos: 1 }]]\r\n        for (let i = 1; i < array.length; i++) {\r\n            let lastelementchecked = false;\r\n            finalarray.push([])\r\n            for (let element of finalarray[i - 1]) {\r\n                finalarray[i].push({ value: array[element.pos * 2], pos: element.pos * 2 })\r\n                finalarray[i].push({ value: array[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 == array.length - 1 || element.pos * 2 == array.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        //this.setState({ heap: this.state.heap, initialheap: finalarray })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const element = this.element;\r\n        const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\r\n            element.offsetWidth < element.scrollWidth;\r\n        if (hasOverflowingChildren && this.state.permitOverflow) {\r\n            const resizefactor = this.state.resizefactor * 0.9\r\n            const width = resizefactor * 120\r\n            const height = resizefactor * 100\r\n            if (width <= 30) {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: 30, height: 27, permitOverflow: false })\r\n\r\n            } else {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: width, height: height })\r\n\r\n            }\r\n        }\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction) {\r\n            if (currentAction.action === \"swap\") {\r\n                const level1 = Math.floor(Math.log2(currentAction.element1))\r\n                const position1 = (currentAction.element1) - (Math.pow(2, level1) - 1) - 1\r\n                const level2 = Math.floor(Math.log2(currentAction.element2))\r\n                const position2 = (currentAction.element2) - (Math.pow(2, level2) - 1) - 1\r\n                let selected1 = this.state.initialheap[level1][position1]\r\n                let selected2 = this.state.initialheap[level2][position2]\r\n\r\n                const initialarray = currentAction.currentheap\r\n                const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n                for (let i = 1; i < initialarray.length; i++) {\r\n                    let lastelementchecked = false;\r\n                    initialheap.push([])\r\n                    for (let element of initialheap[i - 1]) {\r\n                        initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                        initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                        if (element.pos * 2 == initialarray.length - 1 || element.pos * 2 == initialarray.length) {\r\n                            lastelementchecked = true\r\n                        }\r\n                    }\r\n                    if (lastelementchecked) break;\r\n\r\n                }\r\n\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], swappedElements: [selected2, selected1], initialheap: initialheap })\r\n                }, 1000);\r\n\r\n\r\n            }\r\n            if (currentAction.action === \"remove\") {\r\n                const initialarray = currentAction.currentheap\r\n                console.log(initialarray)\r\n                const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n                for (let i = 1; i < initialarray.length; i++) {\r\n                    let lastelementchecked = false;\r\n                    initialheap.push([])\r\n                    for (let element of initialheap[i - 1]) {\r\n                        initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                        initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                        if (element.pos * 2 === initialarray.length - 1 || element.pos * 2 === initialarray.length) {\r\n                            lastelementchecked = true\r\n                        }\r\n                    }\r\n                    if (lastelementchecked) break;\r\n\r\n                }\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        remove: false\r\n                    })\r\n                }, 1000);\r\n            }\r\n            if (currentAction.action == \"settle\") {\r\n                const initialarray = currentAction.currentheap\r\n                console.log(initialarray)\r\n                const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n                for (let i = 1; i < initialarray.length; i++) {\r\n                    let lastelementchecked = false;\r\n                    initialheap.push([])\r\n                    for (let element of initialheap[i - 1]) {\r\n                        initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                        initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                        if (element.pos * 2 == initialarray.length - 1 || element.pos * 2 == initialarray.length) {\r\n                            lastelementchecked = true\r\n                        }\r\n                    }\r\n                    if (lastelementchecked) break;\r\n\r\n                }\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        remove: false\r\n                    })\r\n                }, 100);\r\n            }\r\n        }\r\n    }\r\n    updateHeap(colIdx, rowIdx, newvalue) {\r\n        setTimeout(() => {\r\n            let heap = this.state.initialheap\r\n            heap[colIdx][rowIdx].value = newvalue\r\n            this.setState({ initialheap: heap, selected: [] })\r\n        }, 2000);\r\n\r\n\r\n    }\r\n\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    render() {\r\n        const { finalarray, width, height, initialheap, actions, selected, swappedElements, remove } = this.state\r\n        return (\r\n\r\n            <div key={Math.random()} style={{\r\n                width: \"100%\",\r\n                display: \"inline-block\",\r\n                overflowX: \"auto\"\r\n            }} ref={(el) => { this.element = el }}>\r\n\r\n                <button onClick={() => this.fillTree()}>\r\n                    Add to Heap\r\n            </button>\r\n                <button onClick={() => this.removeSmallest()}>\r\n                    Remove smallest number from Heap\r\n            </button>\r\n                {\r\n                    initialheap.map((row, rowIdx) => {\r\n                        let elements = []\r\n                        return (\r\n                            <div style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"row\",\r\n                                //width: `1000px`\r\n\r\n                            }}>\r\n                                {\r\n                                    row.map((col, colidx) => {\r\n\r\n                                        if (col.value)\r\n                                            if (col.value.distance !== undefined) {\r\n                                                col.value = col.value.distance\r\n                                            }\r\n                                        let isSelected = false\r\n                                        let toBeSwappedWith = undefined\r\n                                        for (let element of selected) {\r\n                                            if (element.pos === col.pos) {\r\n                                                isSelected = true\r\n                                                toBeSwappedWith = swappedElements.shift()\r\n                                                break;\r\n                                            }\r\n                                        }\r\n                                        let color = \"brown\"\r\n                                        if (col.value !== undefined)\r\n                                            elements.push(\r\n                                                <Col style={{\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'center',\r\n                                                }}>\r\n                                                    <HeapElement remove={remove && rowIdx == 0 && colidx == 0} key={colidx * Math.random()} color={color} value={col.value} width={width} height={height} isSelected={isSelected} toBeSwappedWith={toBeSwappedWith} ></HeapElement>\r\n                                                </Col>)\r\n                                        else {\r\n                                            elements.push(\r\n                                                <Col style={{\r\n                                                    display: 'flex',\r\n                                                    alignItems: 'center',\r\n                                                    justifyContent: 'center',\r\n                                                }}>\r\n                                                    <div style={{\r\n                                                        width: `${width}px`,\r\n                                                        height: `${height}px`,\r\n                                                        \"backgroundColor\": \"\",\r\n                                                        \"borderRadius\": \"200px\"\r\n                                                    }}></div>\r\n                                                </Col>)\r\n\r\n                                        }\r\n                                    })}\r\n                                {elements}\r\n                            </div>\r\n\r\n                        )\r\n\r\n                    })}\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './visualizer/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport HeapBlock from './heapVisualizer/HeapBlock';\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#pathfinding\">PathFinding</Nav.Link>\n            <Nav.Link href=\"#sorting\">Sorting</Nav.Link>\n            <Nav.Link href=\"#datastructures\">Data Structures</Nav.Link>\n          </Nav>\n          <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-info\">Search</Button>\n          </Form>\n        </Navbar>\n        <div style={{ \"backgroundColor\": \"#282c34\" }}>\n\n        </div>\n\n        <header className=\"App-header\">\n          <Route\n            path=\"/visualization/#sorting\"\n            component={HeapBlock}\n            exact\n          />\n          <Route\n            path=\"/visualization/#pathfinding\"\n            component={Wrapper}\n            exact\n          />\n        </header>\n\n      </div>\n    </Router >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}