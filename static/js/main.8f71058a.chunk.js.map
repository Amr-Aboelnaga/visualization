{"version":3,"sources":["dataStructures/heap.js","heapVisualizer/HeapElement.jsx","heapVisualizer/HeapBlock.jsx","sortingVisualizer/SortingVisualizer.jsx","algorithms/bubbleSort.js","sortingVisualizer/ArrayElement.jsx","sortingVisualizer/TextBox.jsx","algorithms/dijkstra.js","algorithms/astar.js","visualizer/Visualizer.jsx","visualizer/Wrapper.jsx","hooks/windowSizeHook.js","App.js","serviceWorker.js","index.js"],"names":["MinHeap","visualize","heap","this","set","Set","array","element","insert","currentheap","push","num","actions","has","add","oldarray","copy","action","length","index","distance","Math","floor","element1","element2","res","pop","result","smallest","left","right","temp","undefined","HeapElement","props","state","value","width","height","color","isSelected","toBeSwappedWith","remove","setTimeout","setState","switchtoRemoved","switch","style","Component","HeapBlock","initialheap","resizefactor","permitOverflow","selected","swappedElements","updateExternalArray","initialarray","pos","i","lastelementchecked","milliseconds","Promise","resolve","fillTree","sleep","removeSmallest","number","random","shift","heapify","level","log2","position","pow","readyForNext","removal","fillTreeSystemic","offsetHeight","scrollHeight","offsetWidth","scrollWidth","currentAction","level1","position1","level2","position2","selected1","selected2","a","obj","contains","windowWidth","windowHeight","buttons","Button","variant","onClick","verticalAlign","display","Container","key","overflowX","maxWidth","maxHeight","minWidth","minHeight","marginTop","ref","el","map","row","rowIdx","elements","flexDirection","col","colidx","Col","alignItems","justifyContent","SortingVisualizer","largestSoFar","Infinity","mergeSelected","splice","text","delay","lines","split","includes","addElementToArray","removeElementFromArray","change","changeElementAtArray","initialize","initializeArray","newtext","join","eval","bubbleSort","leftLimit","rightLimit","sorted","buffer","arr","Array","from","n","size","leftStart","min","merge","currentState","currentArray","newArray","space","addon","heaparray","update","fillArray","sort","mergeSort","heapSort","clear","transform","getText","swapped","j","ArrayElement","selectedVariant","now","label","TextBox","onKeyPress","e","keyCode","shiftKey","preventDefault","addNewLineToTextArea","msg_text","handleChange","bind","funcArg","new_state","name","event","target","setCustomValidity","rows","placeholder","onChange","onKeyDown","getNeighbors","node","grid","neighbors","filter","neighbor","isVisited","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","manhattanDistance","finish","x","y","abs","getsmallest","openlist","smallestSoFar","Visualizer","staticgrid","visitedNodesInOrder","mousedown","reset","weightdown","startPressed","finishPressed","startCoordinates","finishCoordinates","calculated","getInitialGrid","startNode","start","Date","getTime","closedlist","q","new_gscore","isWall","h","isWeight","found","astar","dur","console","log","oldgrid","unvisitedNodes","closestNode","dijkstra","isStart","isFinish","visualizeDijkstra","visualizeAstar","switchToWeights","className","nodeIdx","weight","isPath","getIndex","wallIt","weightIt","startIt","finishIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","normalize","recalculate","currentRow","Node","createNode","extraClassName","visited","pathAnimated","switchPath","id","onMouseDown","beStart","beFinish","beWeight","beWall","onMouseUp","onMouseOver","onMouseLeave","Wrapper","getWindowDimensions","window","innerWidth","innerHeight","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","basename","process","Navbar","bg","Brand","href","Nav","to","open","path","render","exact","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f71058a.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    visualize = true;\r\n    constructor(visualize) {\r\n        this.heap = [null];\r\n        this.set = new Set(null)\r\n        this.visualize = visualize\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    copy() {\r\n        if (!this.visualize) { return }\r\n        let currentheap = []\r\n        for (let element of this.heap) {\r\n            currentheap.push(element);\r\n        }\r\n        return currentheap\r\n    }\r\n    insert(num) {\r\n        let actions = []\r\n        if (this.set.has(num)) return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    const currentheap = this.copy()\r\n                    actions.push({ action: \"swap\", element1: Math.floor(index / 2), element2: index, currentheap: currentheap })\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        return actions;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n    remove() {\r\n        let actions = []\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                const res = this.heap.pop()\r\n\r\n                let currentheap = this.copy()\r\n                actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n                let result = { actions: actions, result: res }\r\n                return result\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let currentheap = this.copy()\r\n            actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    const currentheap = this.copy();\r\n                    actions.push({ action: \"swap\", element1: 1, element2: 2, currentheap: currentheap });\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance >= this.heap[left].distance || this.heap[index].distance >= this.heap[right].distance) {\r\n                    if (this.heap[left].distance <= this.heap[right].distance) {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: left, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n\r\n                    } else {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: right, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            currentheap = this.copy()\r\n            actions.push({ action: \"settle\", currentheap: currentheap })\r\n            let result = { actions: actions, result: smallest }\r\n            return result\r\n        } else {\r\n            return\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","\r\nimport React, { Component } from 'react';\r\n\r\nexport default class HeapElement extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            color: this.props.color,\r\n            isSelected: this.props.isSelected,\r\n            toBeSwappedWith: this.props.toBeSwappedWith,\r\n            remove: this.props.remove\r\n        }\r\n\r\n    }\r\n    switch() {\r\n        setTimeout((toBeSwappedWith) => {\r\n            const value = this.state.toBeSwappedWith ? this.state.toBeSwappedWith.value : this.state.value\r\n            this.setState({\r\n                color: \"teal\",\r\n                value: value,\r\n                toBeSwappedWith: undefined,\r\n                isSelected: false\r\n            })\r\n        }, 500);\r\n\r\n    }\r\n    switchtoRemoved() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                value: undefined,\r\n                color: \"\",\r\n                remove: false\r\n            })\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        let { value, width, height, color, isSelected, toBeSwappedWith, remove } = this.state\r\n        if (remove) {\r\n            color = \"red\";\r\n            this.switchtoRemoved()\r\n        }\r\n        if (isSelected && value !== undefined) {\r\n            color = \"blue\"\r\n            this.switch(toBeSwappedWith)\r\n        }\r\n        if (value === undefined)\r\n            color = \"\"\r\n        return (\r\n            <div style={{\r\n                width: `${width}px`,\r\n                height: `${height}px`,\r\n                \"backgroundColor\": `${color}`,\r\n                \"borderRadius\": \"200px\"\r\n            }}>{this.state.value}</div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport './HeapBlock.css';\r\nimport { Col, Button, Container } from 'react-bootstrap';\r\nimport MinHeap from '../dataStructures/heap';\r\nimport HeapElement from './HeapElement';\r\n\r\nexport default class HeapBlock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            initialheap: [],\r\n            resizefactor: 1,\r\n            width: 120,\r\n            height: 100,\r\n            permitOverflow: true,\r\n            heap: new MinHeap(true),\r\n            actions: [],\r\n            selected: [],\r\n            swappedElements: [],\r\n            remove: false,\r\n            updateExternalArray: this.props.updateExternalArray\r\n        }\r\n    }\r\n    heapify(initialarray) {\r\n        const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n        for (let i = 1; i < initialarray.length; i++) {\r\n            let lastelementchecked = false;\r\n            initialheap.push([])\r\n            for (let element of initialheap[i - 1]) {\r\n                initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 === initialarray.length - 1 || element.pos * 2 === initialarray.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        return initialheap\r\n    }\r\n    sleep(milliseconds) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n    async fillTreeSystemic(array) {\r\n        for (let element of array) {\r\n            this.fillTree(element)\r\n            await this.sleep(3000)\r\n        }\r\n        this.setState({ array: this.state.array })\r\n        await this.sleep(1000)\r\n        for (let i = 0; i < array.length; i++) {\r\n            this.state.updateExternalArray(this.removeSmallest(), i)\r\n            await this.sleep(2500)\r\n        }\r\n\r\n    }\r\n    fillTree(number) {\r\n        // const array = this.state.heap.heap\r\n        let num = number ? number : Math.floor(Math.random() * 10)\r\n        let actions = this.state.heap.insert({ distance: num })\r\n        // const finalarray = this.heapify(array)\r\n        const initialarray = actions.shift().element\r\n        const initialheap = this.heapify(initialarray)\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ readyForNext: false, remove: false, heap: this.state.heap, actions: actions, initialheap: initialheap, selected: [initialheap[level][position]] })\r\n\r\n    }\r\n    removeSmallest() {\r\n        if (this.state.heap.heap.length > 1) {\r\n            let removal = this.state.heap.remove()\r\n            let actions = removal.actions\r\n            const initialarray = actions.shift().element\r\n            const level = Math.floor(Math.log2(initialarray.length - 1))\r\n            const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n            this.setState({ selected: [this.state.initialheap[level][position]], remove: true, actions: actions })\r\n\r\n            return removal.result.distance\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.array) {\r\n            this.fillTreeSystemic(this.props.array)\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        const element = this.element;\r\n        const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\r\n            element.offsetWidth < element.scrollWidth;\r\n        if (hasOverflowingChildren && this.state.permitOverflow) {\r\n            const resizefactor = this.state.resizefactor * 0.9\r\n            const width = resizefactor * 120\r\n            const height = resizefactor * 100\r\n            if (width <= 30) {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: 30, height: 27, permitOverflow: false })\r\n\r\n            } else {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: width, height: height })\r\n\r\n            }\r\n        }\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction) {\r\n            if (currentAction.action === \"swap\") {\r\n                let initialarray = currentAction.currentheap\r\n\r\n                const level1 = Math.floor(Math.log2(currentAction.element1))\r\n                const position1 = (currentAction.element1) - (Math.pow(2, level1) - 1) - 1\r\n                const level2 = Math.floor(Math.log2(currentAction.element2))\r\n                const position2 = (currentAction.element2) - (Math.pow(2, level2) - 1) - 1\r\n                let selected1 = this.state.initialheap[level1][position1]\r\n                let selected2 = this.state.initialheap[level2][position2]\r\n\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], swappedElements: [selected2, selected1], initialheap: initialheap })\r\n                }, 1000);\r\n\r\n\r\n            }\r\n            if (currentAction.action === \"remove\") {\r\n                let initialarray = currentAction.currentheap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        remove: false\r\n                    })\r\n                }, 1000);\r\n            }\r\n            if (currentAction.action === \"settle\") {\r\n                const initialarray = this.state.heap.heap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        selected: [],\r\n                        remove: false\r\n                    })\r\n                }, 600);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    render() {\r\n        const { width, height, initialheap, selected, swappedElements, remove, updateExternalArray } = this.state\r\n        const windowWidth = this.props.width\r\n        const windowHeight = this.props.height\r\n        let buttons = () => {\r\n            return (<div>\r\n                <Button variant=\"outline-info\" onClick={() => this.fillTree()}>\r\n                    Add to Heap\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.removeSmallest()}>\r\n                    Remove smallest number from Heap\r\n            </Button></div>)\r\n        }\r\n        if (updateExternalArray) {\r\n            buttons = () => {\r\n                return (<></>)\r\n            }\r\n        }\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>{buttons()}\r\n                < Container key={Math.random()} style={{\r\n                    width: \"100%\",\r\n                    display: \"inline-block\",\r\n                    overflowX: \"auto\",\r\n                    maxWidth: windowWidth - 100, maxHeight: windowHeight - 50, minWidth: windowWidth - 100, minHeight: windowHeight - 50, marginTop: '100px'\r\n\r\n                }\r\n                } ref={(el) => { this.element = el }}>\r\n\r\n\r\n\r\n                    {\r\n                        initialheap.map((row, rowIdx) => {\r\n                            let elements = []\r\n                            return (\r\n                                <div key={rowIdx} style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\"\r\n                                }}>\r\n                                    {\r\n                                        row.map((col, colidx) => {\r\n\r\n                                            if (col.value)\r\n                                                if (col.value.distance !== undefined) {\r\n                                                    col.value = col.value.distance\r\n                                                }\r\n                                            let isSelected = false\r\n                                            let toBeSwappedWith = undefined\r\n                                            for (let element of selected) {\r\n                                                if (element.pos === col.pos) {\r\n                                                    isSelected = true\r\n                                                    toBeSwappedWith = swappedElements.shift()\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            let color = \"teal\"\r\n                                            if (col.value !== undefined)\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <HeapElement remove={remove && rowIdx === 0 && colidx === 0} key={colidx * Math.random()} color={color} value={col.value} width={width} height={height} isSelected={isSelected} toBeSwappedWith={toBeSwappedWith} ></HeapElement>\r\n                                                    </Col>)\r\n                                            else {\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            width: `${width}px`,\r\n                                                            height: `${height}px`,\r\n                                                            \"backgroundColor\": \"\",\r\n                                                            \"borderRadius\": \"200px\"\r\n                                                        }}></div>\r\n                                                    </Col>)\r\n\r\n                                            }\r\n                                            return (<div key={colidx * Math.random()}></div>);\r\n                                        })}\r\n                                    {elements}\r\n                                </div>\r\n\r\n                            )\r\n\r\n                        })\r\n\r\n                    }\r\n\r\n                </Container >\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container, Col, Row, Button } from 'react-bootstrap';\r\nimport { bubbleSort } from '../algorithms/bubbleSort'\r\nimport ArrayElement from './ArrayElement';\r\nimport HeapBlock from '../heapVisualizer/HeapBlock';\r\nimport TextBox from './TextBox'\r\n\r\n\r\nexport default class SortingVisualizer extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            largestSoFar: -Infinity,\r\n            actions: [],\r\n            mergeSelected: [],\r\n            selected: [],\r\n            height: this.props.height,\r\n            width: this.props.width,\r\n            heap: false\r\n        }\r\n\r\n    }\r\n    async update(element, index) {\r\n\r\n        const array = this.state.array\r\n        array[index] = element\r\n        this.setState({ array: array, selected: [index] })\r\n        await this.sleep(500)\r\n        if (index === this.state.array.length - 1) {\r\n            this.setState({ heap: false, selected: [] })\r\n        }\r\n    }\r\n    clear() {\r\n        this.setState({ array: [], selected: [], mergeSelected: [], largestSoFar: [] })\r\n    }\r\n    fillArray() {\r\n        this.state.array.push(7, 6, 5, 4, 3, 2, 1)\r\n        this.setState({\r\n            array: this.state.array, largestSoFar: 7\r\n        })\r\n    }\r\n    sleep(milliseconds) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n    removeElementFromArray(i) {\r\n        const array = this.state.array;\r\n        array.splice(i, 1)\r\n        this.setState({ array: array })\r\n\r\n    }\r\n    changeElementAtArray(i, value) {\r\n        const array = this.state.array;\r\n        array[i] = value\r\n        this.setState({ array: array })\r\n    }\r\n    initializeArray(array) {\r\n        let largestSoFar = -Infinity\r\n        for (let element of array) {\r\n            if (element > largestSoFar) {\r\n                largestSoFar = element\r\n            }\r\n        }\r\n        this.setState({ array: array, largestSoFar: largestSoFar })\r\n    }\r\n    async getText(text) {\r\n        let delay = 1000\r\n        let lines = text.split(\"\\n\")\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].includes(\"add\") || lines[i].includes(\"change\") || lines[i].includes(\"remove\") || lines[i].includes(\"initialize\")) {\r\n                lines[i] = lines[i] + `\\r\\n  await sleep(delay);`\r\n            }\r\n        }\r\n        const add = (element) => {\r\n            this.addElementToArray(element)\r\n        }\r\n        const remove = (index) => {\r\n            this.removeElementFromArray(index)\r\n        }\r\n        const change = (index, value) => {\r\n            this.changeElementAtArray(index, value)\r\n        }\r\n        const initialize = (array) => {\r\n            this.initializeArray(array)\r\n        }\r\n        const sleep = (milliseconds) => {\r\n            return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n        }\r\n        const newtext = lines.join(\"\\r\\n\")\r\n        eval(\"(async () => {\" + newtext + \"})()\")\r\n    }\r\n    addElementToArray(num) {\r\n        let element = num ? num : Math.floor(Math.random() * 1000) + 1\r\n        this.state.array.push(element)\r\n        if (element > this.state.largestSoFar)\r\n            this.setState({ array: this.state.array, largestSoFar: element })\r\n        else {\r\n            this.setState({ array: this.state.array })\r\n        }\r\n    }\r\n    sort() {\r\n        const actions = bubbleSort(this.state.array);\r\n        this.setState({\r\n            actions: actions\r\n        })\r\n    }\r\n    merge(left, right, leftLimit, rightLimit, sorted, buffer) {\r\n        let i = left;\r\n\r\n        //Compare the two sub arrays and merge them in the sorted order\r\n        while (left < leftLimit && right < rightLimit) {\r\n            if (sorted[left] <= sorted[right]) {\r\n                buffer[i++] = sorted[left++];\r\n            } else {\r\n                buffer[i++] = sorted[right++];\r\n            }\r\n        }\r\n\r\n        //If there are elements in the left sub arrray then add it to the result\r\n        while (left < leftLimit) {\r\n            buffer[i++] = sorted[left++];\r\n        }\r\n\r\n        //If there are elements in the right sub array then add it to the result\r\n        while (right < rightLimit) {\r\n            buffer[i++] = sorted[right++];\r\n        }\r\n    }\r\n    async mergeSort(arr) {\r\n        //Create two arrays for sorting\r\n        let sorted = Array.from(arr);\r\n        let n = sorted.length;\r\n        let buffer = new Array(n);\r\n\r\n        for (let size = 1; size < n; size *= 2) {\r\n            for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\r\n\r\n                //Get the two sub arrays\r\n                let left = leftStart,\r\n                    right = Math.min(left + size, n),\r\n                    leftLimit = right,\r\n                    rightLimit = Math.min(right + size, n);\r\n                let selected = []\r\n                for (let i = left; i < leftLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                for (let i = right; i < rightLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                this.setState({\r\n                    mergeSelected: selected\r\n                })\r\n                await this.sleep(250)\r\n                //Merge the sub arrays\r\n                this.merge(left, right, leftLimit, rightLimit, sorted, buffer);\r\n                const currentState = []\r\n                let i = 0\r\n                for (let element of buffer) {\r\n                    if (element === undefined) {\r\n                        currentState.push(sorted[i])\r\n                    } else {\r\n                        currentState.push(element)\r\n                    }\r\n                    i += 1\r\n\r\n                }\r\n                this.setState({\r\n                    array: currentState\r\n                })\r\n            }\r\n\r\n            //Swap the sorted sub array and merge them\r\n            let temp = sorted;\r\n            sorted = buffer;\r\n            buffer = temp;\r\n\r\n        }\r\n        await this.sleep(500)\r\n        this.setState({\r\n            mergeSelected: []\r\n        })\r\n        return sorted;\r\n    }\r\n    async heapSort() {\r\n        this.setState({ heap: true })\r\n    }\r\n    componentDidUpdate() {\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction)\r\n            if (currentAction.action === \"swap\") {\r\n                let selected1 = currentAction.element1\r\n                let selected2 = currentAction.element2\r\n                const currentArray = currentAction.currentArray\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], array: currentArray })\r\n                }, 500);\r\n            } else if (currentAction.action === \"settle\") {\r\n                setTimeout(() => {\r\n                    const currentArray = currentAction.currentArray\r\n                    this.setState({ actions: this.state.actions, array: currentArray, selected: [] })\r\n                }, 500);\r\n            }\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    copy(array) {\r\n        const newArray = []\r\n        for (let element of array) {\r\n            newArray.push(element)\r\n        }\r\n        return newArray\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { array, largestSoFar, selected, mergeSelected, heap } = this.state\r\n        let { width, height } = this.props\r\n\r\n\r\n        const space = (1 / array.length) * 100\r\n        let addon = () => {\r\n            return (<div></div>)\r\n        }\r\n\r\n        if (heap) {\r\n            const heaparray = []\r\n            for (let i = 0; i < array.length; i++) {\r\n                heaparray.push({ distance: array[i] })\r\n            }\r\n            addon = () => {\r\n                return (\r\n                    <HeapBlock width={width / 2} height={height / 2} array={array} updateExternalArray={(element, index) => this.update(element, index)}></HeapBlock>\r\n                )\r\n            }\r\n        }\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.fillArray()}>\r\n                    Fill Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.addElementToArray()}>\r\n                    Add to Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.sort()}>\r\n                    BubbleSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.mergeSort(this.state.array)}>\r\n                    MergeSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.heapSort()}>\r\n                    HeapSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.clear()}>\r\n                    Clear\r\n            </Button>\r\n\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '200px' }}>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n\r\n                                {\r\n                                    array.map((element, index) => {\r\n                                        let isSelected = false\r\n                                        let i = 0\r\n                                        for (let num of mergeSelected) {\r\n                                            if (element === num) {\r\n\r\n                                                element = mergeSelected[i]\r\n                                                isSelected = true\r\n\r\n                                            }\r\n                                            i = i + 1;\r\n                                        }\r\n\r\n                                        if (selected)\r\n                                            for (let element of selected) {\r\n                                                if (element === index) {\r\n                                                    isSelected = true\r\n                                                }\r\n                                            }\r\n                                        return (\r\n                                            <Col key={Math.random()} style={{\r\n                                                width: `${space}%`,\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                transform: 'rotate(180deg)'\r\n                                            }}>\r\n                                                <ArrayElement key={index * Math.random()} value={element} largestSoFar={largestSoFar} variant={\"info\"} isSelected={isSelected}></ArrayElement>\r\n                                            </Col>\r\n\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n\r\n                            </Row>\r\n                        </Col>\r\n                        <div >{addon()}</div>\r\n                        <TextBox width={width - 1000} getText={(text) => this.getText(text)}></TextBox>\r\n\r\n                    </Row>\r\n\r\n                </Container >\r\n\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","export function bubbleSort(array) {\r\n    let actions = []\r\n    for (let i = 0; i < array.length; i++) {\r\n        let swapped = false;\r\n        for (let j = 0; j < array.length; j++) {\r\n            if (j + 1 === array.length) {\r\n                break;\r\n            }\r\n            if (array[j] > array[j + 1]) {\r\n                const currentArray = copy(array);\r\n                actions.push({ action: \"swap\", element1: j, element2: j + 1, currentArray: currentArray });\r\n                [array[j], array[j + 1]] = [array[j + 1], array[j]]\r\n                swapped = true\r\n            }\r\n        }\r\n        if (swapped === false) {\r\n            const currentArray = copy(array);\r\n            actions.push({ action: \"settle\", currentArray: currentArray });\r\n            return actions\r\n        }\r\n    }\r\n    const currentArray = copy(array);\r\n    actions.push({ action: \"settle\", currentArray: currentArray });\r\n    return actions\r\n}\r\nexport function copy(array) {\r\n    const newArray = []\r\n    for (let element of array) {\r\n        newArray.push(element)\r\n    }\r\n    return newArray\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\nexport default class ArrayElement extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: this.props.value,\r\n            isSelected: this.props.isSelected,\r\n            largestSoFar: this.props.largestSoFar,\r\n            variant: this.props.variant\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                variant: \"info\",\r\n            })\r\n        }, 5);\r\n    }\r\n    render() {\r\n        const { value, isSelected, largestSoFar, variant } = this.state\r\n        let selectedVariant = variant\r\n        if (isSelected) {\r\n            selectedVariant = \"danger\"\r\n        }\r\n        let height = value / largestSoFar * 400\r\n\r\n        return (\r\n            <ProgressBar style={{ width: \"50px\", height: `${height}px`, transform: 'rotate(180deg)' }} variant={selectedVariant} now={100} label={value} />\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Button, Container, Row, Col } from 'react-bootstrap';\r\n\r\nexport default class TextBox extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let state = { msg_text: \"\" };\r\n        this.state = state;\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addNewLineToTextArea = this.addNewLineToTextArea.bind(this);\r\n    }\r\n\r\n    onKeyPress = (e) => {\r\n        if (e.keyCode === 13 && e.shiftKey) {\r\n            e.preventDefault();\r\n            this.addNewLineToTextArea();\r\n        }\r\n    };\r\n\r\n\r\n    addNewLineToTextArea() {\r\n        let msg_text = this.state.msg_text + \"\\r\\n\";\r\n        this.setState({ msg_text: msg_text });\r\n    }\r\n\r\n\r\n    handleChange(funcArg) {\r\n        let new_state = {};\r\n        new_state[funcArg.name] = funcArg.event.target.value;\r\n        this.setState(new_state);\r\n        funcArg.event.target.setCustomValidity(\"\");\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Container>\r\n                <Col>\r\n                    <textarea rows=\"3\" placeholder=\"write...\" onChange={(e) =>\r\n                        this.handleChange({ \"event\": e, \"name\": \"msg_text\" })} onKeyDown={this.onKeyPress}\r\n                        value={this.state.msg_text || ''} style={{ width: this.props.width, height: 300 }} >\r\n                    </textarea>\r\n                </Col>\r\n                <Col>\r\n                    <Button onClick={() => this.props.getText(this.state.msg_text)} style={{ width: 100, height: 100 }}> SUBMIT</Button>\r\n\r\n                </Col>\r\n            </Container>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes = new MinHeap(false);\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length > 1) {\r\n        const closestNode = unvisitedNodes.remove().result;\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = closestNode.distance + 1;\r\n            if (neighbor.isWeight) {\r\n                neighbor.distance += 15\r\n            }\r\n            neighbor.previousNode = closestNode;\r\n            unvisitedNodes.insert(neighbor)\r\n        }\r\n    }\r\n}\r\nexport function getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { getNeighbors } from './dijkstra'\r\nexport function astar(grid, start, finish) {\r\n    let openlist = []\r\n    let closedlist = []\r\n    start['g'] = 0\r\n    start.distance = manhattanDistance(start, finish)\r\n\r\n    openlist.push(start)\r\n    while (openlist.length > 0) {\r\n        const q = getsmallest(openlist);\r\n        if (q) {\r\n            q.isVisited = true\r\n            closedlist.push(q)\r\n            if (q === finish) return closedlist\r\n            const neighbors = getNeighbors(q, grid);\r\n            for (let neighbor of neighbors) {\r\n                let new_gscore = 0\r\n                if (neighbor.isWall) {\r\n                    continue\r\n                }\r\n\r\n                new_gscore = q['g'] + 1;\r\n                let h = manhattanDistance(neighbor, finish)\r\n                if (neighbor.isWeight) {\r\n                    h += 15\r\n\r\n                }\r\n                const distance = h + new_gscore\r\n\r\n                let found = false\r\n                if (distance < neighbor.distance) {\r\n                    neighbor['g'] = new_gscore\r\n                    neighbor['h'] = h;\r\n                    neighbor.distance = distance\r\n                }\r\n                for (let element of openlist) {\r\n                    if (element === neighbor) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found === false) {\r\n                    neighbor.previousNode = q;\r\n                    neighbor.distance = distance\r\n                    openlist.push(neighbor)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    return closedlist\r\n\r\n\r\n}\r\nfunction manhattanDistance(node, finish) {\r\n    const x = node.row - finish.row;\r\n    const y = node.col - finish.col;\r\n    const h = Math.abs(x) + Math.abs(y)\r\n    return h\r\n}\r\nfunction getsmallest(openlist) {\r\n    let smallestSoFar = openlist[0]\r\n    let index = 0\r\n    for (let i = 1; i < openlist.length; i++) {\r\n        if (openlist[i].distance < smallestSoFar.distance) {\r\n            smallestSoFar = openlist[i]\r\n            index = i\r\n        } else if (openlist[i].distance === smallestSoFar.distance) {\r\n            if (openlist[i]['h'] < smallestSoFar['h']) {\r\n                smallestSoFar = openlist[i]\r\n                index = i\r\n            }\r\n        }\r\n    }\r\n    let temp = openlist[0]\r\n    openlist[0] = openlist[index]\r\n    openlist[index] = temp\r\n    return openlist.shift()\r\n\r\n}\r\n\r\n","import { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport { astar } from '../algorithms/astar';\r\n\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid = []\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder: [],\r\n            mousedown: false,\r\n            reset: false,\r\n            weightdown: false,\r\n            variant: \"outline-info\",\r\n            startPressed: false,\r\n            finishPressed: false,\r\n            startCoordinates: { row: 7, col: 15 },\r\n            finishCoordinates: { row: 16, col: 35 },\r\n            calculated: false\r\n\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    getIndex(array, element) {\r\n        if (array)\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i] === element) {\r\n                    return i\r\n                }\r\n            }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = this.getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid = grid\r\n    }\r\n    visualizeAstar() {\r\n        const { grid } = this.state;\r\n        const startNode = grid[this.state.startCoordinates.row][this.state.startCoordinates.col];\r\n        const finishNode = grid[this.state.finishCoordinates.row][this.state.finishCoordinates.col];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        console.log(visitedNodesInOrder)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder, calculated: true })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    visualizeDijkstra() {\r\n        const oldgrid = Visualizer.staticgrid\r\n        this.setState({ oldgrid })\r\n        const { grid } = this.state;\r\n        const startNode = grid[this.state.startCoordinates.row][this.state.startCoordinates.col];\r\n        const finishNode = grid[this.state.finishCoordinates.row][this.state.finishCoordinates.col];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder, calculated: true })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    wallIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWall = !Visualizer.staticgrid[row][col].isWall\r\n    }\r\n    weightIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWeight = !Visualizer.staticgrid[row][col].isWeight\r\n    }\r\n    startIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isStart = true\r\n    }\r\n    finishIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isFinish = true\r\n\r\n    }\r\n    handleDown(row, col) {\r\n        if (Visualizer.staticgrid[row][col].isStart) {\r\n            this.setState({ mousedown: true, startPressed: true });\r\n\r\n        } else if (Visualizer.staticgrid[row][col].isFinish) {\r\n            this.setState({ mousedown: true, finishPressed: true });\r\n\r\n        } else\r\n            this.setState({ mousedown: true });\r\n    }\r\n    normalize(row, col) {\r\n        Visualizer.staticgrid[row][col].isStart = false\r\n        Visualizer.staticgrid[row][col].isFinish = false\r\n\r\n\r\n    }\r\n    handleUp(row, col) {\r\n        if (this.state.startPressed) {\r\n            this.setState({ startCoordinates: { row: row, col: col }, mousedown: false, startPressed: false })\r\n\r\n        } else if (this.state.finishPressed) {\r\n            this.setState({ finishCoordinates: { row: row, col: col }, mousedown: false, startPressed: false, finishPressed: false })\r\n\r\n        } else\r\n            this.setState({ mousedown: false });\r\n    }\r\n\r\n    switchToWeights() {\r\n        let variant = \"\"\r\n        if (this.state.variant === \"outline-info\") {\r\n            variant = \"danger\"\r\n        } else {\r\n            variant = \"outline-info\"\r\n        }\r\n        this.setState({ variant: variant, weightdown: !this.state.weightdown })\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder, nodesInShortestPathOrder, mousedown, weightdown, variant, startPressed, finishPressed, calculated } = this.state;\r\n        const { height, width } = this.props\r\n\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}\r\n            >\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.visualizeAstar()}>\r\n                    Visualize A*'s Algorithm\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.props.reset()}>\r\n                    Clear Board\r\n            </Button>\r\n                <Button variant={variant} onClick={() => this.switchToWeights()}>\r\n                    Weights Down\r\n            </Button>\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '100px', justifyContent: 'center' }}\r\n                >\r\n                    {\r\n                        grid.map((row, rowIdx) => {\r\n                            return (\r\n                                <div className=\"row\" key={rowIdx} style={{ justifyContent: 'center' }}>\r\n                                    {row.map((node, nodeIdx) => {\r\n                                        const { row, col, isFinish, isStart, isWall, isVisited, weight } = node;\r\n                                        let isPath = this.getIndex(nodesInShortestPathOrder, node)\r\n                                        if (!!isPath) {\r\n                                            isPath += visitedNodesInOrder.length\r\n                                        }\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeIdx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                isVisited={isVisited}\r\n                                                isPath={isPath}\r\n                                                wallIt={this.wallIt}\r\n                                                weightIt={this.weightIt}\r\n                                                startPressed={startPressed}\r\n                                                finishPressed={finishPressed}\r\n                                                startIt={this.startIt}\r\n                                                finishIt={this.finishIt}\r\n                                                mousedown={mousedown}\r\n                                                weightdown={weightdown}\r\n                                                mousedownHandle={(row, col) => this.handleDown(row, col)}\r\n                                                mouseUpHandle={(row, col) => this.handleUp(row, col)}\r\n                                                normalize={(row, col) => { this.normalize(row, col) }}\r\n                                                weight={weight}\r\n                                                calculated={calculated}\r\n                                                recalculate={() => this.visualizeDijkstra()}\r\n                                                delay={this.getIndex(visitedNodesInOrder, node)}\r\n                                            ></Node>\r\n                                        );\r\n\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n    getInitialGrid() {\r\n        const grid = [];\r\n        for (let row = 0; row < 20; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < 50; col++) {\r\n                const Node = this.createNode(col, row);\r\n                currentRow.push(Node);\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    };\r\n\r\n    createNode(col, row) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.startCoordinates.row && col === this.state.startCoordinates.col,\r\n            isFinish: row === this.state.finishCoordinates.row && col === this.state.finishCoordinates.col,\r\n            distance: Infinity,\r\n            isWeight: false,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n        {\r\n            extraClassName: this.props.isFinish\r\n                ? 'node-finish'\r\n                : this.props.isStart\r\n                    ? 'node-start'\r\n                    : this.props.isWall\r\n                        ? 'node-wall'\r\n                        : this.props.isWeight\r\n                            ? 'node-weight'\r\n                            : '',\r\n            visited: false,\r\n            pathAnimated: false,\r\n            isWall: this.props.isWall,\r\n            isWeight: this.props.isWeight,\r\n            isStart: this.props.isStart\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            const className = this.state.isWeight ? 'node-visited-weighted' : 'node-visited'\r\n            this.setState({\r\n                extraClassName: className,\r\n                visited: true\r\n            })\r\n        }, this.props.delay * 10);\r\n    }\r\n    switchPath() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-shortest-path',\r\n                pathAnimated: true\r\n            })\r\n        }, this.props.isPath * 10);\r\n    }\r\n    beWeight() {\r\n        if (this.state.isWeight) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWeight: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-weight',\r\n                isWeight: true\r\n            })\r\n        }\r\n    }\r\n    beWall() {\r\n        if (this.state.isWall) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWall: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-wall',\r\n                isWall: true\r\n            })\r\n        }\r\n\r\n    }\r\n    beFinish() {\r\n        this.setState({ extraClassName: 'node-finish', isStart: false })\r\n\r\n    }\r\n    beStart() {\r\n        this.setState({ extraClassName: 'node-start', isStart: true })\r\n    }\r\n    normalize() {\r\n        this.setState({ extraClassName: '', isStart: false, isFinish: false })\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            wallIt,\r\n            mousedownHandle,\r\n            mouseUpHandle,\r\n            row,\r\n            weightIt,\r\n            startIt,\r\n            normalize,\r\n            finishIt,\r\n\r\n        } = this.props;\r\n\r\n        if (this.props.isVisited && this.state.visited === false) {\r\n            this.switch()\r\n        }\r\n        if (this.props.isPath !== false && this.state.pathAnimated === false) {\r\n            this.switchPath()\r\n        }\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${this.state.extraClassName}`}\r\n                onMouseDown={() => {\r\n                    if (this.props.startPressed) {\r\n                        this.beStart();\r\n                        startIt(row, col)\r\n                    } else if (this.props.finishPressed) {\r\n                        this.beFinish();\r\n                        finishIt(row, col)\r\n\r\n                    } else if (this.props.weightdown) {\r\n                        if (!this.props.isStart) {\r\n                            this.beWeight();\r\n                            weightIt(row, col);\r\n                        }\r\n                    } else {\r\n                        if (!this.props.isStart) {\r\n                            this.beWall();\r\n                            wallIt(row, col);\r\n                        }\r\n                    }\r\n                    mousedownHandle(row, col);\r\n\r\n                }}\r\n                onMouseUp={() => mouseUpHandle(row, col)}\r\n                onMouseOver={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish)\r\n                        if (this.props.mousedown) {\r\n                            if (this.props.startPressed) {\r\n                                this.beStart();\r\n                                startIt(row, col)\r\n                            } else if (this.props.finishPressed) {\r\n                                this.beFinish();\r\n                                finishIt(row, col)\r\n\r\n                            }\r\n                            else if (this.props.weightdown) {\r\n                                this.beWeight();\r\n                                weightIt(row, col);\r\n                            } else {\r\n                                this.beWall();\r\n                                wallIt(row, col);\r\n                            }\r\n\r\n                        }\r\n                }}\r\n                onMouseLeave={() => {\r\n                    if (this.props.mousedown) {\r\n                        if (this.props.startPressed || this.props.finishPressed) {\r\n                            this.normalize()\r\n                            normalize(row, col)\r\n\r\n\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}  \r\n","\r\nimport React, { Component } from 'react';\r\nimport Visualizer from './Visualizer';\r\nexport default class Wrapper extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            reset: false,\r\n            height: this.props.height,\r\n            width: this.props.width\r\n        }\r\n    }\r\n    reset() {\r\n\r\n        this.setState({\r\n            reset: true\r\n        })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.reset) {\r\n            this.setState({ reset: false })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            !this.state.reset ? <Visualizer reset={() => this.reset()} width={this.props.width} height={this.props.height}></Visualizer > : null\r\n        )\r\n    }\r\n}","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import React from 'react';\nimport './App.css';\nimport Wrapper from './visualizer/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport {\n  HashRouter,\n  Route,\n} from \"react-router-dom\";\nimport HeapBlock from './heapVisualizer/HeapBlock';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer';\nimport useWindowDimensions from './hooks/windowSizeHook';\n\nfunction App() {\n  const { height, width } = useWindowDimensions()\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/pathfinding\">\n              <Button variant=\"outline-info\">PathFinding</Button>\n            </LinkContainer>\n\n            <LinkContainer to=\"/heapvisualization\">\n              <Button variant=\"outline-info\">HeapVisualization</Button>\n\n            </LinkContainer>\n            <LinkContainer to=\"/sortingvisualization\">\n              <Button variant=\"outline-info\">SortingVisualization</Button>\n\n            </LinkContainer>\n\n          </Nav>\n\n          <Button variant=\"outline-info\" onClick={() => { window.open(\"https://github.com/Amr-Aboelnaga/visualization\", \"_blank\") }}>Github Repo</Button>\n        </Navbar>\n\n        <div style={{ \"backgroundColor\": \"#282c34\" }}>\n\n        </div>\n\n        <header className=\"App-header\">\n          <Route\n            path='/heapvisualization'\n            render={() => (\n              <HeapBlock width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/pathfinding\"\n            render={() => (\n              <Wrapper width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/sortingvisualization\"\n            render={() => (\n              <SortingVisualizer width={width} height={height} />\n            )}\n            exact\n          />\n        </header>\n\n      </div>\n    </HashRouter >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}