{"version":3,"sources":["dataStructures/heap.js","algorithms/dijkstra.js","visualizer/Visualizer.jsx","visualizer/Wrapper.jsx","heapVisualizer/HeapElement.jsx","heapVisualizer/HeapBlock.jsx","algorithms/bubbleSort.js","sortingVisualizer/ArrayElement.jsx","sortingVisualizer/SortingVisualizer.jsx","hooks/windowSizeHook.js","App.js","serviceWorker.js","index.js"],"names":["MinHeap","visualize","heap","this","set","Set","array","element","insert","currentheap","push","num","actions","has","add","oldarray","copy","action","length","index","distance","Math","floor","element1","element2","res","pop","result","smallest","left","right","temp","undefined","getNeighbors","node","grid","neighbors","col","row","filter","neighbor","isVisited","Visualizer","staticgrid","state","visitedNodesInOrder","nodesInShortestPathOrder","mousedown","reset","weightdown","variant","startPressed","finishPressed","startCoordinates","finishCoordinates","calculated","a","obj","i","contains","pos","getInitialGrid","setState","oldgrid","startNode","finishNode","start","Date","getTime","unvisitedNodes","closestNode","remove","isWall","Infinity","isWeight","previousNode","dijkstra","dur","console","log","currentNode","unshift","getNodesInShortestPathOrder","isStart","isFinish","props","height","width","style","verticalAlign","display","Button","onClick","visualizeDijkstra","switchToWeights","Container","maxWidth","maxHeight","minWidth","minHeight","marginTop","justifyContent","map","rowIdx","className","key","nodeIdx","weight","isPath","getIndex","wallIt","weightIt","startIt","finishIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","normalize","recalculate","delay","currentRow","Node","createNode","Component","extraClassName","visited","pathAnimated","setTimeout","switch","switchPath","id","onMouseDown","beStart","beFinish","beWeight","beWall","onMouseUp","onMouseOver","onMouseLeave","Wrapper","HeapElement","value","color","isSelected","toBeSwappedWith","switchtoRemoved","HeapBlock","initialheap","resizefactor","permitOverflow","selected","swappedElements","initialarray","lastelementchecked","random","shift","heapify","level","log2","position","pow","readyForNext","offsetHeight","scrollHeight","offsetWidth","scrollWidth","currentAction","level1","position1","level2","position2","selected1","selected2","colIdx","newvalue","windowWidth","windowHeight","fillTree","removeSmallest","overflowX","ref","el","elements","flexDirection","colidx","Col","alignItems","newArray","ArrayElement","largestSoFar","selectedVariant","ProgressBar","transform","now","label","SortingVisualizer","mergeSelected","milliseconds","Promise","resolve","swapped","j","currentArray","bubbleSort","leftLimit","rightLimit","sorted","buffer","arr","Array","from","n","size","leftStart","min","sleep","merge","currentState","space","fillArray","addElementToArray","sort","mergeSort","clear","Row","getWindowDimensions","window","innerWidth","innerHeight","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","basename","process","Navbar","bg","Brand","href","Nav","to","open","path","render","exact","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1d4cbc2.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    visualize = true;\r\n    constructor(visualize) {\r\n        this.heap = [null];\r\n        this.set = new Set(null)\r\n        this.visualize = visualize\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    copy() {\r\n        if (!this.visualize) { return }\r\n        let currentheap = []\r\n        for (let element of this.heap) {\r\n            currentheap.push(element);\r\n        }\r\n        return currentheap\r\n    }\r\n    insert(num) {\r\n        let actions = []\r\n        if (this.set.has(num)) return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    const currentheap = this.copy()\r\n                    actions.push({ action: \"swap\", element1: Math.floor(index / 2), element2: index, currentheap: currentheap })\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        return actions;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n    remove() {\r\n        let actions = []\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                const res = this.heap.pop()\r\n\r\n                let currentheap = this.copy()\r\n                actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n                let result = { actions: actions, result: res }\r\n                return result\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let currentheap = this.copy()\r\n            actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    const currentheap = this.copy();\r\n                    actions.push({ action: \"swap\", element1: 1, element2: 2, currentheap: currentheap });\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance >= this.heap[left].distance || this.heap[index].distance >= this.heap[right].distance) {\r\n                    if (this.heap[left].distance <= this.heap[right].distance) {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: left, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n\r\n                    } else {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: right, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            currentheap = this.copy()\r\n            actions.push({ action: \"settle\", currentheap: currentheap })\r\n            let result = { actions: actions, result: smallest }\r\n            return result\r\n        } else {\r\n            return\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes = new MinHeap(false);\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length > 1) {\r\n        const closestNode = unvisitedNodes.remove().result;\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = closestNode.distance + 1;\r\n            if (neighbor.isWeight) {\r\n                neighbor.distance += 15\r\n            }\r\n            neighbor.previousNode = closestNode;\r\n            unvisitedNodes.insert(neighbor)\r\n        }\r\n    }\r\n}\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid = []\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder: [],\r\n            mousedown: false,\r\n            reset: false,\r\n            weightdown: false,\r\n            variant: \"outline-info\",\r\n            startPressed: false,\r\n            finishPressed: false,\r\n            startCoordinates: { row: 7, col: 15 },\r\n            finishCoordinates: { row: 16, col: 35 },\r\n            calculated: false\r\n\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    getIndex(array, element) {\r\n        if (array)\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i] === element) {\r\n                    return i\r\n                }\r\n            }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = this.getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid = grid\r\n    }\r\n    visualizeDijkstra() {\r\n        const oldgrid = Visualizer.staticgrid\r\n        this.setState({ oldgrid })\r\n        const { grid } = this.state;\r\n        const startNode = grid[this.state.startCoordinates.row][this.state.startCoordinates.col];\r\n        const finishNode = grid[this.state.finishCoordinates.row][this.state.finishCoordinates.col];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder, calculated: true })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    wallIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWall = !Visualizer.staticgrid[row][col].isWall\r\n    }\r\n    weightIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWeight = !Visualizer.staticgrid[row][col].isWeight\r\n    }\r\n    startIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isStart = true\r\n    }\r\n    finishIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isFinish = true\r\n\r\n    }\r\n    handleDown(row, col) {\r\n        if (Visualizer.staticgrid[row][col].isStart) {\r\n            this.setState({ mousedown: true, startPressed: true });\r\n\r\n        } else if (Visualizer.staticgrid[row][col].isFinish) {\r\n            this.setState({ mousedown: true, finishPressed: true });\r\n\r\n        } else\r\n            this.setState({ mousedown: true });\r\n    }\r\n    normalize(row, col) {\r\n        Visualizer.staticgrid[row][col].isStart = false\r\n        Visualizer.staticgrid[row][col].isFinish = false\r\n\r\n\r\n    }\r\n    handleUp(row, col) {\r\n        if (this.state.startPressed) {\r\n            this.setState({ startCoordinates: { row: row, col: col }, mousedown: false, startPressed: false })\r\n\r\n        } else if (this.state.finishPressed) {\r\n            this.setState({ finishCoordinates: { row: row, col: col }, mousedown: false, startPressed: false, finishPressed: false })\r\n\r\n        } else\r\n            this.setState({ mousedown: false });\r\n    }\r\n\r\n    switchToWeights() {\r\n        let variant = \"\"\r\n        if (this.state.variant === \"outline-info\") {\r\n            variant = \"danger\"\r\n        } else {\r\n            variant = \"outline-info\"\r\n        }\r\n        this.setState({ variant: variant, weightdown: !this.state.weightdown })\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder, nodesInShortestPathOrder, mousedown, weightdown, variant, startPressed, finishPressed, calculated } = this.state;\r\n        const { height, width } = this.props\r\n\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}\r\n            >\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.props.reset()}>\r\n                    Clear Board\r\n            </Button>\r\n                <Button variant={variant} onClick={() => this.switchToWeights()}>\r\n                    Weights Down\r\n            </Button>\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '100px', justifyContent: 'center' }}\r\n                >\r\n                    {\r\n                        grid.map((row, rowIdx) => {\r\n                            return (\r\n                                <div className=\"row\" key={rowIdx} style={{ justifyContent: 'center' }}>\r\n                                    {row.map((node, nodeIdx) => {\r\n                                        const { row, col, isFinish, isStart, isWall, isVisited, weight } = node;\r\n                                        let isPath = this.getIndex(nodesInShortestPathOrder, node)\r\n                                        if (!!isPath) {\r\n                                            isPath += visitedNodesInOrder.length\r\n                                        }\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeIdx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                isVisited={isVisited}\r\n                                                isPath={isPath}\r\n                                                wallIt={this.wallIt}\r\n                                                weightIt={this.weightIt}\r\n                                                startPressed={startPressed}\r\n                                                finishPressed={finishPressed}\r\n                                                startIt={this.startIt}\r\n                                                finishIt={this.finishIt}\r\n                                                mousedown={mousedown}\r\n                                                weightdown={weightdown}\r\n                                                mousedownHandle={(row, col) => this.handleDown(row, col)}\r\n                                                mouseUpHandle={(row, col) => this.handleUp(row, col)}\r\n                                                normalize={(row, col) => { this.normalize(row, col) }}\r\n                                                weight={weight}\r\n                                                calculated={calculated}\r\n                                                recalculate={() => this.visualizeDijkstra()}\r\n                                                delay={this.getIndex(visitedNodesInOrder, node)}\r\n                                            ></Node>\r\n                                        );\r\n\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n    getInitialGrid() {\r\n        const grid = [];\r\n        for (let row = 0; row < 20; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < 50; col++) {\r\n                const Node = this.createNode(col, row);\r\n                currentRow.push(Node);\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    };\r\n\r\n    createNode(col, row) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.startCoordinates.row && col === this.state.startCoordinates.col,\r\n            isFinish: row === this.state.finishCoordinates.row && col === this.state.finishCoordinates.col,\r\n            distance: Infinity,\r\n            isWeight: false,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n        {\r\n            extraClassName: this.props.isFinish\r\n                ? 'node-finish'\r\n                : this.props.isStart\r\n                    ? 'node-start'\r\n                    : this.props.isWall\r\n                        ? 'node-wall'\r\n                        : this.props.isWeight\r\n                            ? 'node-weight'\r\n                            : '',\r\n            visited: false,\r\n            pathAnimated: false,\r\n            isWall: this.props.isWall,\r\n            isWeight: this.props.isWeight,\r\n            isStart: this.props.isStart\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            const className = this.state.isWeight ? 'node-visited-weighted' : 'node-visited'\r\n            this.setState({\r\n                extraClassName: className,\r\n                visited: true\r\n            })\r\n        }, this.props.delay * 10);\r\n    }\r\n    switchPath() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-shortest-path',\r\n                pathAnimated: true\r\n            })\r\n        }, this.props.isPath * 10);\r\n    }\r\n    beWeight() {\r\n        if (this.state.isWeight) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWeight: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-weight',\r\n                isWeight: true\r\n            })\r\n        }\r\n    }\r\n    beWall() {\r\n        if (this.state.isWall) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWall: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-wall',\r\n                isWall: true\r\n            })\r\n        }\r\n\r\n    }\r\n    beFinish() {\r\n        this.setState({ extraClassName: 'node-finish', isStart: false })\r\n\r\n    }\r\n    beStart() {\r\n        this.setState({ extraClassName: 'node-start', isStart: true })\r\n    }\r\n    normalize() {\r\n        this.setState({ extraClassName: '', isStart: false, isFinish: false })\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            wallIt,\r\n            mousedownHandle,\r\n            mouseUpHandle,\r\n            row,\r\n            weightIt,\r\n            startIt,\r\n            normalize,\r\n            finishIt,\r\n\r\n        } = this.props;\r\n\r\n        if (this.props.isVisited && this.state.visited === false) {\r\n            this.switch()\r\n        }\r\n        if (this.props.isPath !== false && this.state.pathAnimated === false) {\r\n            this.switchPath()\r\n        }\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${this.state.extraClassName}`}\r\n                onMouseDown={() => {\r\n                    if (this.props.startPressed) {\r\n                        this.beStart();\r\n                        startIt(row, col)\r\n                    } else if (this.props.finishPressed) {\r\n                        this.beFinish();\r\n                        finishIt(row, col)\r\n\r\n                    } else if (this.props.weightdown) {\r\n                        if (!this.props.isStart) {\r\n                            this.beWeight();\r\n                            weightIt(row, col);\r\n                        }\r\n                    } else {\r\n                        if (!this.props.isStart) {\r\n                            this.beWall();\r\n                            wallIt(row, col);\r\n                        }\r\n                    }\r\n                    mousedownHandle(row, col);\r\n\r\n                }}\r\n                onMouseUp={() => mouseUpHandle(row, col)}\r\n                onMouseOver={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish)\r\n                        if (this.props.mousedown) {\r\n                            if (this.props.startPressed) {\r\n                                this.beStart();\r\n                                startIt(row, col)\r\n                            } else if (this.props.finishPressed) {\r\n                                this.beFinish();\r\n                                finishIt(row, col)\r\n\r\n                            }\r\n                            else if (this.props.weightdown) {\r\n                                this.beWeight();\r\n                                weightIt(row, col);\r\n                            } else {\r\n                                this.beWall();\r\n                                wallIt(row, col);\r\n                            }\r\n\r\n                        }\r\n                }}\r\n                onMouseLeave={() => {\r\n                    if (this.props.mousedown) {\r\n                        if (this.props.startPressed || this.props.finishPressed) {\r\n                            this.normalize()\r\n                            normalize(row, col)\r\n\r\n\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}  \r\n","\r\nimport React, { Component } from 'react';\r\nimport Visualizer from './Visualizer';\r\nexport default class Wrapper extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            reset: false,\r\n            height: this.props.height,\r\n            width: this.props.width\r\n        }\r\n    }\r\n    reset() {\r\n\r\n        this.setState({\r\n            reset: true\r\n        })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.reset) {\r\n            this.setState({ reset: false })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            !this.state.reset ? <Visualizer reset={() => this.reset()} width={this.props.width} height={this.props.height}></Visualizer > : null\r\n        )\r\n    }\r\n}","\r\nimport React, { Component } from 'react';\r\n\r\nexport default class HeapElement extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            color: this.props.color,\r\n            isSelected: this.props.isSelected,\r\n            toBeSwappedWith: this.props.toBeSwappedWith,\r\n            remove: this.props.remove\r\n        }\r\n\r\n    }\r\n    switch() {\r\n        setTimeout((toBeSwappedWith) => {\r\n            const value = this.state.toBeSwappedWith ? this.state.toBeSwappedWith.value : this.state.value\r\n            this.setState({\r\n                color: \"teal\",\r\n                value: value,\r\n                toBeSwappedWith: undefined,\r\n                isSelected: false\r\n            })\r\n        }, 500);\r\n\r\n    }\r\n    switchtoRemoved() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                value: undefined,\r\n                color: \"\",\r\n                remove: false\r\n            })\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        let { value, width, height, color, isSelected, toBeSwappedWith, remove } = this.state\r\n        if (remove) {\r\n            color = \"red\";\r\n            this.switchtoRemoved()\r\n        }\r\n        if (isSelected && value !== undefined) {\r\n            color = \"blue\"\r\n            this.switch(toBeSwappedWith)\r\n        }\r\n        // else if (isSelected && this.state.isSelected && value) {\r\n        //     this.switch()\r\n        // }\r\n        if (value === undefined)\r\n            color = \"\"\r\n        return (\r\n            <div style={{\r\n                width: `${width}px`,\r\n                height: `${height}px`,\r\n                \"backgroundColor\": `${color}`,\r\n                \"borderRadius\": \"200px\"\r\n            }}>{this.state.value}</div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport './HeapBlock.css';\r\nimport { Col, Button, Container } from 'react-bootstrap';\r\nimport MinHeap from '../dataStructures/heap';\r\nimport HeapElement from './HeapElement';\r\n\r\nexport default class HeapBlock extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            initialheap: [],\r\n            resizefactor: 1,\r\n            width: 120,\r\n            height: 100,\r\n            permitOverflow: true,\r\n            heap: new MinHeap(true),\r\n            actions: [],\r\n            selected: [],\r\n            swappedElements: [],\r\n            remove: false\r\n        }\r\n    }\r\n    heapify(initialarray) {\r\n        const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n        for (let i = 1; i < initialarray.length; i++) {\r\n            let lastelementchecked = false;\r\n            initialheap.push([])\r\n            for (let element of initialheap[i - 1]) {\r\n                initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 === initialarray.length - 1 || element.pos * 2 === initialarray.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        return initialheap\r\n    }\r\n    fillTree() {\r\n        // const array = this.state.heap.heap\r\n        let num = Math.floor(Math.random() * 10)\r\n        let actions = this.state.heap.insert({ distance: num })\r\n        // const finalarray = this.heapify(array)\r\n        const initialarray = actions.shift().element\r\n        const initialheap = this.heapify(initialarray)\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ readyForNext: false, remove: false, heap: this.state.heap, actions: actions, initialheap: initialheap, selected: [initialheap[level][position]] })\r\n\r\n    }\r\n    removeSmallest() {\r\n        if (this.state.heap.heap.length > 1) {\r\n            let actions = this.state.heap.remove().actions\r\n            const initialarray = actions.shift().element\r\n            const level = Math.floor(Math.log2(initialarray.length - 1))\r\n            const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n            this.setState({ selected: [this.state.initialheap[level][position]], remove: true, actions: actions })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const element = this.element;\r\n        const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\r\n            element.offsetWidth < element.scrollWidth;\r\n        if (hasOverflowingChildren && this.state.permitOverflow) {\r\n            const resizefactor = this.state.resizefactor * 0.9\r\n            const width = resizefactor * 120\r\n            const height = resizefactor * 100\r\n            if (width <= 30) {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: 30, height: 27, permitOverflow: false })\r\n\r\n            } else {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: width, height: height })\r\n\r\n            }\r\n        }\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction) {\r\n            if (currentAction.action === \"swap\") {\r\n                let initialarray = currentAction.currentheap\r\n\r\n                const level1 = Math.floor(Math.log2(currentAction.element1))\r\n                const position1 = (currentAction.element1) - (Math.pow(2, level1) - 1) - 1\r\n                const level2 = Math.floor(Math.log2(currentAction.element2))\r\n                const position2 = (currentAction.element2) - (Math.pow(2, level2) - 1) - 1\r\n                let selected1 = this.state.initialheap[level1][position1]\r\n                let selected2 = this.state.initialheap[level2][position2]\r\n\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], swappedElements: [selected2, selected1], initialheap: initialheap })\r\n                }, 1000);\r\n\r\n\r\n            }\r\n            if (currentAction.action === \"remove\") {\r\n                let initialarray = currentAction.currentheap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        remove: false\r\n                    })\r\n                }, 1000);\r\n            }\r\n            if (currentAction.action === \"settle\") {\r\n                const initialarray = this.state.heap.heap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        selected: [],\r\n                        remove: false\r\n                    })\r\n                }, 600);\r\n            }\r\n        }\r\n    }\r\n    updateHeap(colIdx, rowIdx, newvalue) {\r\n        setTimeout(() => {\r\n            let heap = this.state.initialheap\r\n            heap[colIdx][rowIdx].value = newvalue\r\n            this.setState({ initialheap: heap, selected: [] })\r\n        }, 2000);\r\n\r\n\r\n    }\r\n\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    render() {\r\n        const { width, height, initialheap, selected, swappedElements, remove } = this.state\r\n        const windowWidth = this.props.width\r\n        const windowHeight = this.props.height\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n                <Button variant=\"outline-info\" onClick={() => this.fillTree()}>\r\n                    Add to Heap\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.removeSmallest()}>\r\n                    Remove smallest number from Heap\r\n            </Button>\r\n                < Container key={Math.random()} style={{\r\n                    width: \"100%\",\r\n                    display: \"inline-block\",\r\n                    overflowX: \"auto\",\r\n                    maxWidth: windowWidth - 100, maxHeight: windowHeight - 50, minWidth: windowWidth - 100, minHeight: windowHeight - 50, marginTop: '200px'\r\n\r\n                }\r\n                } ref={(el) => { this.element = el }}>\r\n\r\n\r\n\r\n                    {\r\n                        initialheap.map((row, rowIdx) => {\r\n                            let elements = []\r\n                            return (\r\n                                <div key={rowIdx} style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\"\r\n                                }}>\r\n                                    {\r\n                                        row.map((col, colidx) => {\r\n\r\n                                            if (col.value)\r\n                                                if (col.value.distance !== undefined) {\r\n                                                    col.value = col.value.distance\r\n                                                }\r\n                                            let isSelected = false\r\n                                            let toBeSwappedWith = undefined\r\n                                            for (let element of selected) {\r\n                                                if (element.pos === col.pos) {\r\n                                                    isSelected = true\r\n                                                    toBeSwappedWith = swappedElements.shift()\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            let color = \"teal\"\r\n                                            if (col.value !== undefined)\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <HeapElement remove={remove && rowIdx === 0 && colidx === 0} key={colidx * Math.random()} color={color} value={col.value} width={width} height={height} isSelected={isSelected} toBeSwappedWith={toBeSwappedWith} ></HeapElement>\r\n                                                    </Col>)\r\n                                            else {\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            width: `${width}px`,\r\n                                                            height: `${height}px`,\r\n                                                            \"backgroundColor\": \"\",\r\n                                                            \"borderRadius\": \"200px\"\r\n                                                        }}></div>\r\n                                                    </Col>)\r\n\r\n                                            }\r\n                                            return (<div key={colidx * Math.random()}></div>);\r\n                                        })}\r\n                                    {elements}\r\n                                </div>\r\n\r\n                            )\r\n\r\n                        })\r\n\r\n                    }\r\n\r\n                </Container >\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\n","export function bubbleSort(array) {\r\n    let actions = []\r\n    for (let i = 0; i < array.length; i++) {\r\n        let swapped = false;\r\n        for (let j = 0; j < array.length; j++) {\r\n            if (j + 1 === array.length) {\r\n                break;\r\n            }\r\n            if (array[j] > array[j + 1]) {\r\n                const currentArray = copy(array);\r\n                actions.push({ action: \"swap\", element1: j, element2: j + 1, currentArray: currentArray });\r\n                [array[j], array[j + 1]] = [array[j + 1], array[j]]\r\n                swapped = true\r\n            }\r\n        }\r\n        if (swapped === false) {\r\n            const currentArray = copy(array);\r\n            actions.push({ action: \"settle\", currentArray: currentArray });\r\n            return actions\r\n        }\r\n    }\r\n    const currentArray = copy(array);\r\n    actions.push({ action: \"settle\", currentArray: currentArray });\r\n    return actions\r\n}\r\nexport function copy(array) {\r\n    const newArray = []\r\n    for (let element of array) {\r\n        newArray.push(element)\r\n    }\r\n    return newArray\r\n}\r\n\r\n// let array = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n// bubbleSort(array)\r\n// console.log(array)\r\n","import React, { Component } from 'react';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\nexport default class ArrayElement extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: this.props.value,\r\n            isSelected: this.props.isSelected,\r\n            largestSoFar: this.props.largestSoFar,\r\n            variant: this.props.variant\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                variant: \"info\",\r\n            })\r\n        }, 5);\r\n    }\r\n    render() {\r\n        const { value, isSelected, largestSoFar, variant } = this.state\r\n        let selectedVariant = variant\r\n        if (isSelected) {\r\n            selectedVariant = \"danger\"\r\n        }\r\n        let height = value / largestSoFar * 400\r\n\r\n        return (\r\n            <ProgressBar style={{ width: \"50px\", height: `${height}px`, transform: 'rotate(180deg)' }} variant={selectedVariant} now={100} label={value} />\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container, Col, Row, Button } from 'react-bootstrap';\r\nimport { bubbleSort } from '../algorithms/bubbleSort'\r\nimport ArrayElement from './ArrayElement';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            largestSoFar: -Infinity,\r\n            actions: [],\r\n            mergeSelected: [],\r\n            selected: [],\r\n            height: this.props.height,\r\n            width: this.props.width\r\n        }\r\n\r\n    }\r\n    clear() {\r\n        this.setState({ array: [], selected: [], mergeSelected: [], largestSoFar: [] })\r\n    }\r\n    fillArray() {\r\n        this.state.array.push(7, 6, 5, 4, 3, 2, 1)\r\n        this.setState({\r\n            array: this.state.array, largestSoFar: 7\r\n        })\r\n    }\r\n    sleep(milliseconds) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    addElementToArray() {\r\n        let element = Math.floor(Math.random() * 1000) + 1\r\n        this.state.array.push(element)\r\n        if (element > this.state.largestSoFar)\r\n            this.setState({ array: this.state.array, largestSoFar: element })\r\n        else {\r\n            this.setState({ array: this.state.array })\r\n        }\r\n    }\r\n    sort() {\r\n        const actions = bubbleSort(this.state.array);\r\n        this.setState({\r\n            actions: actions\r\n        })\r\n    }\r\n    merge(left, right, leftLimit, rightLimit, sorted, buffer) {\r\n        let i = left;\r\n\r\n        //Compare the two sub arrays and merge them in the sorted order\r\n        while (left < leftLimit && right < rightLimit) {\r\n            if (sorted[left] <= sorted[right]) {\r\n                buffer[i++] = sorted[left++];\r\n            } else {\r\n                buffer[i++] = sorted[right++];\r\n            }\r\n        }\r\n\r\n        //If there are elements in the left sub arrray then add it to the result\r\n        while (left < leftLimit) {\r\n            buffer[i++] = sorted[left++];\r\n        }\r\n\r\n        //If there are elements in the right sub array then add it to the result\r\n        while (right < rightLimit) {\r\n            buffer[i++] = sorted[right++];\r\n        }\r\n    }\r\n    async mergeSort(arr) {\r\n        //Create two arrays for sorting\r\n        let sorted = Array.from(arr);\r\n        let n = sorted.length;\r\n        let buffer = new Array(n);\r\n\r\n        for (let size = 1; size < n; size *= 2) {\r\n            for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\r\n\r\n                //Get the two sub arrays\r\n                let left = leftStart,\r\n                    right = Math.min(left + size, n),\r\n                    leftLimit = right,\r\n                    rightLimit = Math.min(right + size, n);\r\n                let selected = []\r\n                for (let i = left; i < leftLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                for (let i = right; i < rightLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                this.setState({\r\n                    mergeSelected: selected\r\n                })\r\n                await this.sleep(250)\r\n                //Merge the sub arrays\r\n                this.merge(left, right, leftLimit, rightLimit, sorted, buffer);\r\n                const currentState = []\r\n                let i = 0\r\n                for (let element of buffer) {\r\n                    if (element === undefined) {\r\n                        currentState.push(sorted[i])\r\n                    } else {\r\n                        currentState.push(element)\r\n                    }\r\n                    i += 1\r\n\r\n                }\r\n                this.setState({\r\n                    array: currentState\r\n                })\r\n            }\r\n\r\n            //Swap the sorted sub array and merge them\r\n            let temp = sorted;\r\n            sorted = buffer;\r\n            buffer = temp;\r\n\r\n        }\r\n        await this.sleep(500)\r\n        this.setState({\r\n            mergeSelected: []\r\n        })\r\n        return sorted;\r\n    }\r\n    componentDidUpdate() {\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction)\r\n            if (currentAction.action === \"swap\") {\r\n                let selected1 = currentAction.element1\r\n                let selected2 = currentAction.element2\r\n                const currentArray = currentAction.currentArray\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], array: currentArray })\r\n                }, 10);\r\n            } else if (currentAction.action === \"settle\") {\r\n                setTimeout(() => {\r\n                    const currentArray = currentAction.currentArray\r\n                    this.setState({ actions: this.state.actions, array: currentArray, selected: [] })\r\n                }, 10);\r\n            }\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    copy(array) {\r\n        const newArray = []\r\n        for (let element of array) {\r\n            newArray.push(element)\r\n        }\r\n        return newArray\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { array, largestSoFar, selected, mergeSelected } = this.state\r\n        const { width, height } = this.props\r\n        console.log(width)\r\n        console.log(height)\r\n\r\n        const space = (1 / array.length) * 100\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.fillArray()}>\r\n                    Fill Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.addElementToArray()}>\r\n                    Add to Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.sort()}>\r\n                    BubbleSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.mergeSort(this.state.array)}>\r\n                    MergeSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.clear()}>\r\n                    Clear\r\n            </Button>\r\n\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '200px' }}>\r\n\r\n\r\n                    <Row>\r\n\r\n                        {\r\n                            array.map((element, index) => {\r\n                                let isSelected = false\r\n                                let i = 0\r\n                                for (let num of mergeSelected) {\r\n                                    if (element === num) {\r\n\r\n                                        element = mergeSelected[i]\r\n                                        isSelected = true\r\n\r\n                                    }\r\n                                    i = i + 1;\r\n                                }\r\n\r\n                                if (selected)\r\n                                    for (let element of selected) {\r\n                                        if (element === index) {\r\n                                            isSelected = true\r\n                                        }\r\n                                    }\r\n                                return (\r\n                                    <Col key={Math.random()} style={{\r\n                                        width: `${space}%`,\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        transform: 'rotate(180deg)'\r\n                                    }}>\r\n                                        <ArrayElement key={index * Math.random()} value={element} largestSoFar={largestSoFar} variant={\"info\"} isSelected={isSelected}></ArrayElement>\r\n                                    </Col>\r\n\r\n                                );\r\n                            })\r\n                        }\r\n\r\n\r\n                    </Row>\r\n\r\n\r\n                </Container >\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import React from 'react';\nimport './App.css';\nimport Wrapper from './visualizer/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport {\n  HashRouter,\n  Route,\n} from \"react-router-dom\";\nimport HeapBlock from './heapVisualizer/HeapBlock';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer';\nimport useWindowDimensions from './hooks/windowSizeHook';\n\nfunction App() {\n  const { height, width } = useWindowDimensions()\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/pathfinding\">\n              <Button variant=\"outline-info\">PathFinding</Button>\n            </LinkContainer>\n\n            <LinkContainer to=\"/heapvisualization\">\n              <Button variant=\"outline-info\">HeapVisualization</Button>\n\n            </LinkContainer>\n            <LinkContainer to=\"/sortingvisualization\">\n              <Button variant=\"outline-info\">SortingVisualization</Button>\n\n            </LinkContainer>\n\n          </Nav>\n\n          <Button variant=\"outline-info\" onClick={() => { window.open(\"https://github.com/Amr-Aboelnaga/visualization\", \"_blank\") }}>Github Repo</Button>\n        </Navbar>\n\n        <div style={{ \"backgroundColor\": \"#282c34\" }}>\n\n        </div>\n\n        <header className=\"App-header\">\n          <Route\n            path='/heapvisualization'\n            render={() => (\n              <HeapBlock width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/pathfinding\"\n            render={() => (\n              <Wrapper width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/sortingvisualization\"\n            render={() => (\n              <SortingVisualizer width={width} height={height} />\n            )}\n            exact\n          />\n        </header>\n\n      </div>\n    </HashRouter >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}