{"version":3,"sources":["dataStructures/heap.js","algorithms/dijkstra.js","visualizer/Visualizer.jsx","visualizer/Wrapper.jsx","heapVisualizer/HeapElement.jsx","heapVisualizer/HeapBlock.jsx","algorithms/bubbleSort.js","sortingVisualizer/ArrayElement.jsx","sortingVisualizer/SortingVisualizer.jsx","hooks/windowSizeHook.js","App.js","serviceWorker.js","index.js"],"names":["MinHeap","visualize","heap","this","set","Set","array","element","insert","currentheap","push","num","actions","has","add","oldarray","copy","action","length","index","distance","Math","floor","element1","element2","res","pop","result","smallest","left","right","temp","undefined","getNeighbors","node","grid","neighbors","col","row","filter","neighbor","isVisited","Visualizer","staticgrid","state","visitedNodesInOrder","nodesInShortestPathOrder","mousedown","reset","a","obj","i","contains","pos","getInitialGrid","setState","oldgrid","startNode","finishNode","start","Date","getTime","unvisitedNodes","closestNode","remove","isWall","Infinity","previousNode","dijkstra","dur","console","log","currentNode","unshift","getNodesInShortestPathOrder","props","height","width","style","verticalAlign","display","Button","variant","onClick","visualizeDijkstra","Container","maxWidth","maxHeight","minWidth","minHeight","marginTop","justifyContent","map","rowIdx","className","key","nodeIdx","isFinish","isStart","isPath","getIndex","wallIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","delay","Component","currentRow","Node","createNode","extraClassName","visited","pathAnimated","setTimeout","switch","switchPath","id","onMouseDown","beWall","onMouseUp","onMouseOver","Wrapper","HeapElement","value","color","isSelected","toBeSwappedWith","switchtoRemoved","HeapBlock","initialheap","resizefactor","permitOverflow","selected","swappedElements","initialarray","lastelementchecked","random","shift","heapify","level","log2","position","pow","readyForNext","offsetHeight","scrollHeight","offsetWidth","scrollWidth","currentAction","level1","position1","level2","position2","selected1","selected2","colIdx","newvalue","windowWidth","windowHeight","fillTree","removeSmallest","overflowX","ref","el","elements","flexDirection","colidx","Col","alignItems","newArray","ArrayElement","largestSoFar","selectedVariant","ProgressBar","transform","now","label","SortingVisualizer","mergeSelected","milliseconds","Promise","resolve","swapped","j","currentArray","bubbleSort","leftLimit","rightLimit","sorted","buffer","arr","Array","from","n","size","leftStart","min","sleep","merge","currentState","space","fillArray","addElementToArray","sort","mergeSort","clear","Row","getWindowDimensions","window","innerWidth","innerHeight","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","basename","process","Navbar","bg","Brand","href","Nav","to","open","path","render","exact","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c803c064.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    visualize = true;\r\n    constructor(visualize) {\r\n        this.heap = [null];\r\n        this.set = new Set(null)\r\n        this.visualize = visualize\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    copy() {\r\n        if (!this.visualize) { return }\r\n        let currentheap = []\r\n        for (let element of this.heap) {\r\n            currentheap.push(element);\r\n        }\r\n        return currentheap\r\n    }\r\n    insert(num) {\r\n        let actions = []\r\n        if (this.set.has(num)) return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    const currentheap = this.copy()\r\n                    actions.push({ action: \"swap\", element1: Math.floor(index / 2), element2: index, currentheap: currentheap })\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        return actions;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n    remove() {\r\n        let actions = []\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                const res = this.heap.pop()\r\n\r\n                let currentheap = this.copy()\r\n                actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n                let result = { actions: actions, result: res }\r\n                return result\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let currentheap = this.copy()\r\n            actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    const currentheap = this.copy();\r\n                    actions.push({ action: \"swap\", element1: 1, element2: 2, currentheap: currentheap });\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance >= this.heap[left].distance || this.heap[index].distance >= this.heap[right].distance) {\r\n                    if (this.heap[left].distance <= this.heap[right].distance) {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: left, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n\r\n                    } else {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: right, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            currentheap = this.copy()\r\n            actions.push({ action: \"settle\", currentheap: currentheap })\r\n            let result = { actions: actions, result: smallest }\r\n            return result\r\n        } else {\r\n            return\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes = new MinHeap(false);\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length > 1) {\r\n        const closestNode = unvisitedNodes.remove().result;\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = closestNode.distance + 1;\r\n            neighbor.previousNode = closestNode;\r\n            unvisitedNodes.insert(neighbor)\r\n        }\r\n    }\r\n}\r\nfunction getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nconst START_NODE_ROW = 7;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 16;\r\nconst FINISH_NODE_COL = 35;\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid = []\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder: [],\r\n            mousedown: false,\r\n            reset: false\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    getIndex(array, element) {\r\n        if (array)\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i] === element) {\r\n                    return i\r\n                }\r\n            }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid = grid\r\n    }\r\n    visualizeDijkstra() {\r\n        const oldgrid = Visualizer.staticgrid\r\n        this.setState({ oldgrid })\r\n        const { grid } = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    wallIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWall = !Visualizer.staticgrid[row][col].isWall\r\n    }\r\n    handleDown() {\r\n        this.setState({ mousedown: true });\r\n    }\r\n    handleUp() {\r\n        this.setState({ mousedown: false });\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder, nodesInShortestPathOrder, mousedown } = this.state;\r\n        const { height, width } = this.props\r\n\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n                <Button variant=\"outline-info\" onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.props.reset()}>\r\n                    Clear Board\r\n            </Button>\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '200px', justifyContent: 'center' }}>\r\n                    {\r\n                        grid.map((row, rowIdx) => {\r\n                            return (\r\n                                <div className=\"row\" key={rowIdx} style={{ justifyContent: 'center' }}>\r\n                                    {row.map((node, nodeIdx) => {\r\n                                        const { row, col, isFinish, isStart, isWall, isVisited } = node;\r\n                                        let isPath = this.getIndex(nodesInShortestPathOrder, node)\r\n                                        if (!!isPath) {\r\n                                            isPath += visitedNodesInOrder.length\r\n                                        }\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeIdx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                isVisited={isVisited}\r\n                                                isPath={isPath}\r\n                                                wallIt={this.wallIt}\r\n                                                mousedown={mousedown}\r\n                                                mousedownHandle={() => this.handleDown()}\r\n                                                mouseUpHandle={() => this.handleUp()}\r\n                                                delay={this.getIndex(visitedNodesInOrder, node)}\r\n                                            ></Node>\r\n                                        );\r\n\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n        const currentRow = [];\r\n        for (let col = 0; col < 50; col++) {\r\n            const Node = createNode(col, row);\r\n            currentRow.push(Node);\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n    return {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n};\r\nexport class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n        {\r\n            extraClassName: this.props.isFinish\r\n                ? 'node-finish'\r\n                : this.props.isStart\r\n                    ? 'node-start'\r\n                    : this.props.isWall\r\n                        ? 'node-wall'\r\n                        : '',\r\n            visited: false,\r\n            pathAnimated: false,\r\n            isWall: this.props.isWall\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-visited',\r\n                visited: true\r\n            })\r\n        }, this.props.delay);\r\n    }\r\n    switchPath() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-shortest-path',\r\n                pathAnimated: true\r\n            })\r\n        }, this.props.isPath);\r\n    }\r\n    beWall() {\r\n        if (this.state.isWall) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWall: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-wall',\r\n                isWall: true\r\n            })\r\n        }\r\n\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            wallIt,\r\n            mousedownHandle,\r\n            mouseUpHandle,\r\n            row,\r\n        } = this.props;\r\n        if (this.props.isVisited && this.state.visited === false) {\r\n            this.switch()\r\n        }\r\n        if (this.props.isPath !== false && this.state.pathAnimated === false) {\r\n            this.switchPath()\r\n        }\r\n\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${this.state.extraClassName}`}\r\n                onMouseDown={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish) {\r\n                        this.beWall();\r\n                        wallIt(row, col);\r\n                        mousedownHandle();\r\n                    }\r\n                }}\r\n                onMouseUp={() => mouseUpHandle()}\r\n                onMouseOver={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish)\r\n                        if (this.props.mousedown) {\r\n                            this.beWall();\r\n                            wallIt(row, col);\r\n                        }\r\n                }}\r\n\r\n            ></div>\r\n        );\r\n    }\r\n}  \r\n","\r\nimport React, { Component } from 'react';\r\nimport Visualizer from './Visualizer';\r\nexport default class Wrapper extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            reset: false,\r\n            height: this.props.height,\r\n            width: this.props.width\r\n        }\r\n    }\r\n    reset() {\r\n\r\n        this.setState({\r\n            reset: true\r\n        })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.reset) {\r\n            this.setState({ reset: false })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            !this.state.reset ? <Visualizer reset={() => this.reset()} width={this.props.width} height={this.props.height}></Visualizer > : null\r\n        )\r\n    }\r\n}","\r\nimport React, { Component } from 'react';\r\n\r\nexport default class HeapElement extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            color: this.props.color,\r\n            isSelected: this.props.isSelected,\r\n            toBeSwappedWith: this.props.toBeSwappedWith,\r\n            remove: this.props.remove\r\n        }\r\n\r\n    }\r\n    switch() {\r\n        setTimeout((toBeSwappedWith) => {\r\n            const value = this.state.toBeSwappedWith ? this.state.toBeSwappedWith.value : this.state.value\r\n            this.setState({\r\n                color: \"teal\",\r\n                value: value,\r\n                toBeSwappedWith: undefined,\r\n                isSelected: false\r\n            })\r\n        }, 500);\r\n\r\n    }\r\n    switchtoRemoved() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                value: undefined,\r\n                color: \"\",\r\n                remove: false\r\n            })\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        let { value, width, height, color, isSelected, toBeSwappedWith, remove } = this.state\r\n        if (remove) {\r\n            color = \"red\";\r\n            this.switchtoRemoved()\r\n        }\r\n        if (isSelected && value !== undefined) {\r\n            color = \"blue\"\r\n            this.switch(toBeSwappedWith)\r\n        }\r\n        // else if (isSelected && this.state.isSelected && value) {\r\n        //     this.switch()\r\n        // }\r\n        if (value === undefined)\r\n            color = \"\"\r\n        return (\r\n            <div style={{\r\n                width: `${width}px`,\r\n                height: `${height}px`,\r\n                \"backgroundColor\": `${color}`,\r\n                \"borderRadius\": \"200px\"\r\n            }}>{this.state.value}</div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport './HeapBlock.css';\r\nimport { Col, Button, Container } from 'react-bootstrap';\r\nimport MinHeap from '../dataStructures/heap';\r\nimport HeapElement from './HeapElement';\r\n\r\nexport default class HeapBlock extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            initialheap: [],\r\n            resizefactor: 1,\r\n            width: 120,\r\n            height: 100,\r\n            permitOverflow: true,\r\n            heap: new MinHeap(true),\r\n            actions: [],\r\n            selected: [],\r\n            swappedElements: [],\r\n            remove: false\r\n        }\r\n    }\r\n    heapify(initialarray) {\r\n        const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n        for (let i = 1; i < initialarray.length; i++) {\r\n            let lastelementchecked = false;\r\n            initialheap.push([])\r\n            for (let element of initialheap[i - 1]) {\r\n                initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 === initialarray.length - 1 || element.pos * 2 === initialarray.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        return initialheap\r\n    }\r\n    fillTree() {\r\n        // const array = this.state.heap.heap\r\n        let num = Math.floor(Math.random() * 10)\r\n        let actions = this.state.heap.insert({ distance: num })\r\n        // const finalarray = this.heapify(array)\r\n        const initialarray = actions.shift().element\r\n        const initialheap = this.heapify(initialarray)\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ readyForNext: false, remove: false, heap: this.state.heap, actions: actions, initialheap: initialheap, selected: [initialheap[level][position]] })\r\n\r\n    }\r\n    removeSmallest() {\r\n\r\n        let actions = this.state.heap.remove().actions\r\n        const initialarray = actions.shift().element\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ selected: [this.state.initialheap[level][position]], remove: true, actions: actions })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const element = this.element;\r\n        const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\r\n            element.offsetWidth < element.scrollWidth;\r\n        if (hasOverflowingChildren && this.state.permitOverflow) {\r\n            const resizefactor = this.state.resizefactor * 0.9\r\n            const width = resizefactor * 120\r\n            const height = resizefactor * 100\r\n            if (width <= 30) {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: 30, height: 27, permitOverflow: false })\r\n\r\n            } else {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: width, height: height })\r\n\r\n            }\r\n        }\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction) {\r\n            if (currentAction.action === \"swap\") {\r\n                let initialarray = currentAction.currentheap\r\n\r\n                const level1 = Math.floor(Math.log2(currentAction.element1))\r\n                const position1 = (currentAction.element1) - (Math.pow(2, level1) - 1) - 1\r\n                const level2 = Math.floor(Math.log2(currentAction.element2))\r\n                const position2 = (currentAction.element2) - (Math.pow(2, level2) - 1) - 1\r\n                let selected1 = this.state.initialheap[level1][position1]\r\n                let selected2 = this.state.initialheap[level2][position2]\r\n\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], swappedElements: [selected2, selected1], initialheap: initialheap })\r\n                }, 1000);\r\n\r\n\r\n            }\r\n            if (currentAction.action === \"remove\") {\r\n                let initialarray = currentAction.currentheap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        remove: false\r\n                    })\r\n                }, 1000);\r\n            }\r\n            if (currentAction.action === \"settle\") {\r\n                const initialarray = this.state.heap.heap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        selected: [],\r\n                        remove: false\r\n                    })\r\n                }, 600);\r\n            }\r\n        }\r\n    }\r\n    updateHeap(colIdx, rowIdx, newvalue) {\r\n        setTimeout(() => {\r\n            let heap = this.state.initialheap\r\n            heap[colIdx][rowIdx].value = newvalue\r\n            this.setState({ initialheap: heap, selected: [] })\r\n        }, 2000);\r\n\r\n\r\n    }\r\n\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    render() {\r\n        const { width, height, initialheap, selected, swappedElements, remove } = this.state\r\n        const windowWidth = this.props.width\r\n        const windowHeight = this.props.height\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n                <Button variant=\"outline-info\" onClick={() => this.fillTree()}>\r\n                    Add to Heap\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.removeSmallest()}>\r\n                    Remove smallest number from Heap\r\n            </Button>\r\n                < Container key={Math.random()} style={{\r\n                    width: \"100%\",\r\n                    display: \"inline-block\",\r\n                    overflowX: \"auto\",\r\n                    maxWidth: windowWidth - 100, maxHeight: windowHeight - 50, minWidth: windowWidth - 100, minHeight: windowHeight - 50, marginTop: '200px'\r\n\r\n                }\r\n                } ref={(el) => { this.element = el }}>\r\n\r\n\r\n\r\n                    {\r\n                        initialheap.map((row, rowIdx) => {\r\n                            let elements = []\r\n                            return (\r\n                                <div key={rowIdx} style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\"\r\n                                }}>\r\n                                    {\r\n                                        row.map((col, colidx) => {\r\n\r\n                                            if (col.value)\r\n                                                if (col.value.distance !== undefined) {\r\n                                                    col.value = col.value.distance\r\n                                                }\r\n                                            let isSelected = false\r\n                                            let toBeSwappedWith = undefined\r\n                                            for (let element of selected) {\r\n                                                if (element.pos === col.pos) {\r\n                                                    isSelected = true\r\n                                                    toBeSwappedWith = swappedElements.shift()\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            let color = \"teal\"\r\n                                            if (col.value !== undefined)\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <HeapElement remove={remove && rowIdx === 0 && colidx === 0} key={colidx * Math.random()} color={color} value={col.value} width={width} height={height} isSelected={isSelected} toBeSwappedWith={toBeSwappedWith} ></HeapElement>\r\n                                                    </Col>)\r\n                                            else {\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            width: `${width}px`,\r\n                                                            height: `${height}px`,\r\n                                                            \"backgroundColor\": \"\",\r\n                                                            \"borderRadius\": \"200px\"\r\n                                                        }}></div>\r\n                                                    </Col>)\r\n\r\n                                            }\r\n                                            return (<div key={colidx * Math.random()}></div>);\r\n                                        })}\r\n                                    {elements}\r\n                                </div>\r\n\r\n                            )\r\n\r\n                        })\r\n\r\n                    }\r\n\r\n                </Container >\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\n","export function bubbleSort(array) {\r\n    let actions = []\r\n    for (let i = 0; i < array.length; i++) {\r\n        let swapped = false;\r\n        for (let j = 0; j < array.length; j++) {\r\n            if (j + 1 === array.length) {\r\n                break;\r\n            }\r\n            if (array[j] > array[j + 1]) {\r\n                const currentArray = copy(array);\r\n                actions.push({ action: \"swap\", element1: j, element2: j + 1, currentArray: currentArray });\r\n                [array[j], array[j + 1]] = [array[j + 1], array[j]]\r\n                swapped = true\r\n            }\r\n        }\r\n        if (swapped === false) {\r\n            const currentArray = copy(array);\r\n            actions.push({ action: \"settle\", currentArray: currentArray });\r\n            return actions\r\n        }\r\n    }\r\n    const currentArray = copy(array);\r\n    actions.push({ action: \"settle\", currentArray: currentArray });\r\n    return actions\r\n}\r\nexport function copy(array) {\r\n    const newArray = []\r\n    for (let element of array) {\r\n        newArray.push(element)\r\n    }\r\n    return newArray\r\n}\r\n\r\n// let array = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\r\n// bubbleSort(array)\r\n// console.log(array)\r\n","import React, { Component } from 'react';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\nexport default class ArrayElement extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: this.props.value,\r\n            isSelected: this.props.isSelected,\r\n            largestSoFar: this.props.largestSoFar,\r\n            variant: this.props.variant\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                variant: \"info\",\r\n            })\r\n        }, 5);\r\n    }\r\n    render() {\r\n        const { value, isSelected, largestSoFar, variant } = this.state\r\n        let selectedVariant = variant\r\n        if (isSelected) {\r\n            selectedVariant = \"danger\"\r\n        }\r\n        let height = value / largestSoFar * 400\r\n\r\n        return (\r\n            <ProgressBar style={{ width: \"50px\", height: `${height}px`, transform: 'rotate(180deg)' }} variant={selectedVariant} now={100} label={value} />\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container, Col, Row, Button } from 'react-bootstrap';\r\nimport { bubbleSort } from '../algorithms/bubbleSort'\r\nimport ArrayElement from './ArrayElement';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            largestSoFar: -Infinity,\r\n            actions: [],\r\n            mergeSelected: [],\r\n            selected: [],\r\n            height: this.props.height,\r\n            width: this.props.width\r\n        }\r\n\r\n    }\r\n    clear() {\r\n        this.setState({ array: [], selected: [], mergeSelected: [], largestSoFar: [] })\r\n    }\r\n    fillArray() {\r\n        this.state.array.push(7, 6, 5, 4, 3, 2, 1)\r\n        this.setState({\r\n            array: this.state.array, largestSoFar: 7\r\n        })\r\n    }\r\n    sleep(milliseconds) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    addElementToArray() {\r\n        let element = Math.floor(Math.random() * 1000) + 1\r\n        this.state.array.push(element)\r\n        if (element > this.state.largestSoFar)\r\n            this.setState({ array: this.state.array, largestSoFar: element })\r\n        else {\r\n            this.setState({ array: this.state.array })\r\n        }\r\n    }\r\n    sort() {\r\n        const actions = bubbleSort(this.state.array);\r\n        this.setState({\r\n            actions: actions\r\n        })\r\n    }\r\n    merge(left, right, leftLimit, rightLimit, sorted, buffer) {\r\n        let i = left;\r\n\r\n        //Compare the two sub arrays and merge them in the sorted order\r\n        while (left < leftLimit && right < rightLimit) {\r\n            if (sorted[left] <= sorted[right]) {\r\n                buffer[i++] = sorted[left++];\r\n            } else {\r\n                buffer[i++] = sorted[right++];\r\n            }\r\n        }\r\n\r\n        //If there are elements in the left sub arrray then add it to the result\r\n        while (left < leftLimit) {\r\n            buffer[i++] = sorted[left++];\r\n        }\r\n\r\n        //If there are elements in the right sub array then add it to the result\r\n        while (right < rightLimit) {\r\n            buffer[i++] = sorted[right++];\r\n        }\r\n    }\r\n    async mergeSort(arr) {\r\n        //Create two arrays for sorting\r\n        let sorted = Array.from(arr);\r\n        let n = sorted.length;\r\n        let buffer = new Array(n);\r\n\r\n        for (let size = 1; size < n; size *= 2) {\r\n            for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\r\n\r\n                //Get the two sub arrays\r\n                let left = leftStart,\r\n                    right = Math.min(left + size, n),\r\n                    leftLimit = right,\r\n                    rightLimit = Math.min(right + size, n);\r\n                let selected = []\r\n                for (let i = left; i < leftLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                for (let i = right; i < rightLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                this.setState({\r\n                    mergeSelected: selected\r\n                })\r\n                await this.sleep(250)\r\n                //Merge the sub arrays\r\n                this.merge(left, right, leftLimit, rightLimit, sorted, buffer);\r\n                const currentState = []\r\n                let i = 0\r\n                for (let element of buffer) {\r\n                    if (element === undefined) {\r\n                        currentState.push(sorted[i])\r\n                    } else {\r\n                        currentState.push(element)\r\n                    }\r\n                    i += 1\r\n\r\n                }\r\n                this.setState({\r\n                    array: currentState\r\n                })\r\n            }\r\n\r\n            //Swap the sorted sub array and merge them\r\n            let temp = sorted;\r\n            sorted = buffer;\r\n            buffer = temp;\r\n\r\n        }\r\n        await this.sleep(500)\r\n        this.setState({\r\n            mergeSelected: []\r\n        })\r\n        return sorted;\r\n    }\r\n    componentDidUpdate() {\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction)\r\n            if (currentAction.action === \"swap\") {\r\n                let selected1 = currentAction.element1\r\n                let selected2 = currentAction.element2\r\n                const currentArray = currentAction.currentArray\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], array: currentArray })\r\n                }, 10);\r\n            } else if (currentAction.action === \"settle\") {\r\n                setTimeout(() => {\r\n                    const currentArray = currentAction.currentArray\r\n                    this.setState({ actions: this.state.actions, array: currentArray, selected: [] })\r\n                }, 10);\r\n            }\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    copy(array) {\r\n        const newArray = []\r\n        for (let element of array) {\r\n            newArray.push(element)\r\n        }\r\n        return newArray\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { array, largestSoFar, selected, mergeSelected } = this.state\r\n        const { width, height } = this.props\r\n        console.log(width)\r\n        console.log(height)\r\n\r\n        const space = (1 / array.length) * 100\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.fillArray()}>\r\n                    Fill Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.addElementToArray()}>\r\n                    Add to Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.sort()}>\r\n                    BubbleSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.mergeSort(this.state.array)}>\r\n                    MergeSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.clear()}>\r\n                    Clear\r\n            </Button>\r\n\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '200px' }}>\r\n\r\n\r\n                    <Row>\r\n\r\n                        {\r\n                            array.map((element, index) => {\r\n                                let isSelected = false\r\n                                let i = 0\r\n                                for (let num of mergeSelected) {\r\n                                    if (element === num) {\r\n\r\n                                        element = mergeSelected[i]\r\n                                        isSelected = true\r\n\r\n                                    }\r\n                                    i = i + 1;\r\n                                }\r\n\r\n                                if (selected)\r\n                                    for (let element of selected) {\r\n                                        if (element === index) {\r\n                                            isSelected = true\r\n                                        }\r\n                                    }\r\n                                return (\r\n                                    <Col key={Math.random()} style={{\r\n                                        width: `${space}%`,\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        transform: 'rotate(180deg)'\r\n                                    }}>\r\n                                        <ArrayElement key={index * Math.random()} value={element} largestSoFar={largestSoFar} variant={\"info\"} isSelected={isSelected}></ArrayElement>\r\n                                    </Col>\r\n\r\n                                );\r\n                            })\r\n                        }\r\n\r\n\r\n                    </Row>\r\n\r\n\r\n                </Container >\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import React from 'react';\nimport './App.css';\nimport Wrapper from './visualizer/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Form, FormControl, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport {\n  HashRouter,\n  Route,\n} from \"react-router-dom\";\nimport HeapBlock from './heapVisualizer/HeapBlock';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer';\nimport useWindowDimensions from './hooks/windowSizeHook';\n\nfunction App() {\n  const { height, width } = useWindowDimensions()\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/pathfinding\">\n              <Button variant=\"outline-info\">PathFinding</Button>\n            </LinkContainer>\n\n            <LinkContainer to=\"/heapvisualization\">\n              <Button variant=\"outline-info\">HeapVisualization</Button>\n\n            </LinkContainer>\n            <LinkContainer to=\"/sortingvisualization\">\n              <Button variant=\"outline-info\">SortingVisualization</Button>\n\n            </LinkContainer>\n\n          </Nav>\n\n          <Button variant=\"outline-info\" onClick={() => { window.open(\"https://github.com/Amr-Aboelnaga/visualization\", \"_blank\") }}>Github Repo</Button>\n        </Navbar>\n\n        <div style={{ \"backgroundColor\": \"#282c34\" }}>\n\n        </div>\n\n        <header className=\"App-header\">\n          <Route\n            path='/heapvisualization'\n            render={() => (\n              <HeapBlock width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/pathfinding\"\n            render={() => (\n              <Wrapper width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/sortingvisualization\"\n            render={() => (\n              <SortingVisualizer width={width} height={height} />\n            )}\n            exact\n          />\n        </header>\n\n      </div>\n    </HashRouter >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}