{"version":3,"sources":["dataStructures/heap.js","algorithms/dijkstra.js","algorithms/astar.js","visualizer/Visualizer.jsx","visualizer/Wrapper.jsx","heapVisualizer/HeapElement.jsx","heapVisualizer/HeapBlock.jsx","algorithms/bubbleSort.js","sortingVisualizer/ArrayElement.jsx","sortingVisualizer/SortingVisualizer.jsx","hooks/windowSizeHook.js","App.js","serviceWorker.js","index.js"],"names":["MinHeap","visualize","heap","this","set","Set","array","element","insert","currentheap","push","num","actions","has","add","oldarray","copy","action","length","index","distance","Math","floor","element1","element2","res","pop","result","smallest","left","right","temp","undefined","getNeighbors","node","grid","neighbors","col","row","filter","neighbor","isVisited","getNodesInShortestPathOrder","finishNode","nodesInShortestPathOrder","currentNode","unshift","previousNode","manhattanDistance","finish","x","y","abs","getsmallest","openlist","smallestSoFar","i","shift","Visualizer","staticgrid","state","visitedNodesInOrder","mousedown","reset","weightdown","variant","startPressed","finishPressed","startCoordinates","finishCoordinates","calculated","a","obj","contains","pos","getInitialGrid","setState","startNode","start","Date","getTime","closedlist","q","new_gscore","isWall","h","isWeight","found","astar","dur","console","log","oldgrid","unvisitedNodes","closestNode","remove","Infinity","dijkstra","isStart","isFinish","props","height","width","style","verticalAlign","display","Button","onClick","visualizeDijkstra","visualizeAstar","switchToWeights","Container","maxWidth","maxHeight","minWidth","minHeight","marginTop","justifyContent","map","rowIdx","className","key","nodeIdx","weight","isPath","getIndex","wallIt","weightIt","startIt","finishIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","normalize","recalculate","delay","currentRow","Node","createNode","Component","extraClassName","visited","pathAnimated","setTimeout","switch","switchPath","id","onMouseDown","beStart","beFinish","beWeight","beWall","onMouseUp","onMouseOver","onMouseLeave","Wrapper","HeapElement","value","color","isSelected","toBeSwappedWith","switchtoRemoved","HeapBlock","initialheap","resizefactor","permitOverflow","selected","swappedElements","updateExternalArray","initialarray","lastelementchecked","milliseconds","Promise","resolve","fillTree","sleep","removeSmallest","number","random","heapify","level","log2","position","pow","readyForNext","removal","fillTreeSystemic","offsetHeight","scrollHeight","offsetWidth","scrollWidth","currentAction","level1","position1","level2","position2","selected1","selected2","windowWidth","windowHeight","buttons","overflowX","ref","el","elements","flexDirection","colidx","Col","alignItems","newArray","ArrayElement","largestSoFar","selectedVariant","ProgressBar","transform","now","label","SortingVisualizer","mergeSelected","swapped","j","currentArray","bubbleSort","leftLimit","rightLimit","sorted","buffer","arr","Array","from","n","size","leftStart","min","merge","currentState","space","addon","heaparray","update","fillArray","addElementToArray","sort","mergeSort","heapSort","clear","Row","getWindowDimensions","window","innerWidth","innerHeight","App","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","basename","process","Navbar","bg","Brand","href","Nav","to","open","path","render","exact","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fed03a45.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    visualize = true;\r\n    constructor(visualize) {\r\n        this.heap = [null];\r\n        this.set = new Set(null)\r\n        this.visualize = visualize\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    copy() {\r\n        if (!this.visualize) { return }\r\n        let currentheap = []\r\n        for (let element of this.heap) {\r\n            currentheap.push(element);\r\n        }\r\n        return currentheap\r\n    }\r\n    insert(num) {\r\n        let actions = []\r\n        if (this.set.has(num)) return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    const currentheap = this.copy()\r\n                    actions.push({ action: \"swap\", element1: Math.floor(index / 2), element2: index, currentheap: currentheap })\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        return actions;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return actions;\r\n    }\r\n    remove() {\r\n        let actions = []\r\n        const oldarray = this.copy()\r\n        actions.push({ action: \"oldarray\", element: oldarray })\r\n\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                const res = this.heap.pop()\r\n\r\n                let currentheap = this.copy()\r\n                actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n                let result = { actions: actions, result: res }\r\n                return result\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let currentheap = this.copy()\r\n            actions.push({ action: \"remove\", element: 0, currentheap: currentheap })\r\n\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    const currentheap = this.copy();\r\n                    actions.push({ action: \"swap\", element1: 1, element2: 2, currentheap: currentheap });\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance >= this.heap[left].distance || this.heap[index].distance >= this.heap[right].distance) {\r\n                    if (this.heap[left].distance <= this.heap[right].distance) {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: left, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n\r\n                    } else {\r\n                        const currentheap = this.copy()\r\n                        actions.push({ action: \"swap\", element1: index, element2: right, currentheap: currentheap })\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            currentheap = this.copy()\r\n            actions.push({ action: \"settle\", currentheap: currentheap })\r\n            let result = { actions: actions, result: smallest }\r\n            return result\r\n        } else {\r\n            return\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes = new MinHeap(false);\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length > 1) {\r\n        const closestNode = unvisitedNodes.remove().result;\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n            neighbor.distance = closestNode.distance + 1;\r\n            if (neighbor.isWeight) {\r\n                neighbor.distance += 15\r\n            }\r\n            neighbor.previousNode = closestNode;\r\n            unvisitedNodes.insert(neighbor)\r\n        }\r\n    }\r\n}\r\nexport function getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const { col, row } = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n        nodesInShortestPathOrder.unshift(currentNode);\r\n        currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n}\r\n","import { getNeighbors } from './dijkstra'\r\nexport function astar(grid, start, finish) {\r\n    let openlist = []\r\n    let closedlist = []\r\n    start['g'] = 0\r\n    start.distance = manhattanDistance(start, finish)\r\n\r\n    openlist.push(start)\r\n    while (openlist.length > 0) {\r\n        const q = getsmallest(openlist);\r\n        if (q) {\r\n            q.isVisited = true\r\n            closedlist.push(q)\r\n            if (q === finish) return closedlist\r\n            const neighbors = getNeighbors(q, grid);\r\n            for (let neighbor of neighbors) {\r\n                let new_gscore = 0\r\n                if (neighbor.isWall) {\r\n                    continue\r\n                }\r\n\r\n                new_gscore = q['g'] + 1;\r\n                let h = manhattanDistance(neighbor, finish)\r\n                if (neighbor.isWeight) {\r\n                    h += 15\r\n\r\n                }\r\n                const distance = h + new_gscore\r\n\r\n                let found = false\r\n                if (distance < neighbor.distance) {\r\n                    neighbor['g'] = new_gscore\r\n                    neighbor['h'] = h;\r\n                    neighbor.distance = distance\r\n                }\r\n                for (let element of openlist) {\r\n                    if (element === neighbor) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found === false) {\r\n                    neighbor.previousNode = q;\r\n                    neighbor.distance = distance\r\n                    openlist.push(neighbor)\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    return closedlist\r\n\r\n\r\n}\r\nfunction manhattanDistance(node, finish) {\r\n    const x = node.row - finish.row;\r\n    const y = node.col - finish.col;\r\n    const h = Math.abs(x) + Math.abs(y)\r\n    return h\r\n}\r\nfunction getsmallest(openlist) {\r\n    let smallestSoFar = openlist[0]\r\n    let index = 0\r\n    for (let i = 1; i < openlist.length; i++) {\r\n        if (openlist[i].distance < smallestSoFar.distance) {\r\n            smallestSoFar = openlist[i]\r\n            index = i\r\n        } else if (openlist[i].distance === smallestSoFar.distance) {\r\n            if (openlist[i]['h'] < smallestSoFar['h']) {\r\n                smallestSoFar = openlist[i]\r\n                index = i\r\n            }\r\n        }\r\n    }\r\n    let temp = openlist[0]\r\n    openlist[0] = openlist[index]\r\n    openlist[index] = temp\r\n    return openlist.shift()\r\n\r\n}\r\n\r\n","import { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport { astar } from '../algorithms/astar';\r\n\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\nimport { Button, Container } from 'react-bootstrap';\r\n\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid = []\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder: [],\r\n            mousedown: false,\r\n            reset: false,\r\n            weightdown: false,\r\n            variant: \"outline-info\",\r\n            startPressed: false,\r\n            finishPressed: false,\r\n            startCoordinates: { row: 7, col: 15 },\r\n            finishCoordinates: { row: 16, col: 35 },\r\n            calculated: false\r\n\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    getIndex(array, element) {\r\n        if (array)\r\n            for (let i = 0; i < array.length; i++) {\r\n                if (array[i] === element) {\r\n                    return i\r\n                }\r\n            }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = this.getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid = grid\r\n    }\r\n    visualizeAstar() {\r\n        const { grid } = this.state;\r\n        const startNode = grid[this.state.startCoordinates.row][this.state.startCoordinates.col];\r\n        const finishNode = grid[this.state.finishCoordinates.row][this.state.finishCoordinates.col];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        console.log(visitedNodesInOrder)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder, calculated: true })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    visualizeDijkstra() {\r\n        const oldgrid = Visualizer.staticgrid\r\n        this.setState({ oldgrid })\r\n        const { grid } = this.state;\r\n        const startNode = grid[this.state.startCoordinates.row][this.state.startCoordinates.col];\r\n        const finishNode = grid[this.state.finishCoordinates.row][this.state.finishCoordinates.col];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({ visitedNodesInOrder })\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({ nodesInShortestPathOrder, calculated: true })\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n    wallIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWall = !Visualizer.staticgrid[row][col].isWall\r\n    }\r\n    weightIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isWeight = !Visualizer.staticgrid[row][col].isWeight\r\n    }\r\n    startIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isStart = true\r\n    }\r\n    finishIt(row, col) {\r\n        Visualizer.staticgrid[row][col].isFinish = true\r\n\r\n    }\r\n    handleDown(row, col) {\r\n        if (Visualizer.staticgrid[row][col].isStart) {\r\n            this.setState({ mousedown: true, startPressed: true });\r\n\r\n        } else if (Visualizer.staticgrid[row][col].isFinish) {\r\n            this.setState({ mousedown: true, finishPressed: true });\r\n\r\n        } else\r\n            this.setState({ mousedown: true });\r\n    }\r\n    normalize(row, col) {\r\n        Visualizer.staticgrid[row][col].isStart = false\r\n        Visualizer.staticgrid[row][col].isFinish = false\r\n\r\n\r\n    }\r\n    handleUp(row, col) {\r\n        if (this.state.startPressed) {\r\n            this.setState({ startCoordinates: { row: row, col: col }, mousedown: false, startPressed: false })\r\n\r\n        } else if (this.state.finishPressed) {\r\n            this.setState({ finishCoordinates: { row: row, col: col }, mousedown: false, startPressed: false, finishPressed: false })\r\n\r\n        } else\r\n            this.setState({ mousedown: false });\r\n    }\r\n\r\n    switchToWeights() {\r\n        let variant = \"\"\r\n        if (this.state.variant === \"outline-info\") {\r\n            variant = \"danger\"\r\n        } else {\r\n            variant = \"outline-info\"\r\n        }\r\n        this.setState({ variant: variant, weightdown: !this.state.weightdown })\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder, nodesInShortestPathOrder, mousedown, weightdown, variant, startPressed, finishPressed, calculated } = this.state;\r\n        const { height, width } = this.props\r\n\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}\r\n            >\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.visualizeAstar()}>\r\n                    Visualize A*'s Algorithm\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.props.reset()}>\r\n                    Clear Board\r\n            </Button>\r\n                <Button variant={variant} onClick={() => this.switchToWeights()}>\r\n                    Weights Down\r\n            </Button>\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '100px', justifyContent: 'center' }}\r\n                >\r\n                    {\r\n                        grid.map((row, rowIdx) => {\r\n                            return (\r\n                                <div className=\"row\" key={rowIdx} style={{ justifyContent: 'center' }}>\r\n                                    {row.map((node, nodeIdx) => {\r\n                                        const { row, col, isFinish, isStart, isWall, isVisited, weight } = node;\r\n                                        let isPath = this.getIndex(nodesInShortestPathOrder, node)\r\n                                        if (!!isPath) {\r\n                                            isPath += visitedNodesInOrder.length\r\n                                        }\r\n                                        return (\r\n                                            <Node\r\n                                                key={nodeIdx}\r\n                                                col={col}\r\n                                                isFinish={isFinish}\r\n                                                isStart={isStart}\r\n                                                isWall={isWall}\r\n                                                row={row}\r\n                                                isVisited={isVisited}\r\n                                                isPath={isPath}\r\n                                                wallIt={this.wallIt}\r\n                                                weightIt={this.weightIt}\r\n                                                startPressed={startPressed}\r\n                                                finishPressed={finishPressed}\r\n                                                startIt={this.startIt}\r\n                                                finishIt={this.finishIt}\r\n                                                mousedown={mousedown}\r\n                                                weightdown={weightdown}\r\n                                                mousedownHandle={(row, col) => this.handleDown(row, col)}\r\n                                                mouseUpHandle={(row, col) => this.handleUp(row, col)}\r\n                                                normalize={(row, col) => { this.normalize(row, col) }}\r\n                                                weight={weight}\r\n                                                calculated={calculated}\r\n                                                recalculate={() => this.visualizeDijkstra()}\r\n                                                delay={this.getIndex(visitedNodesInOrder, node)}\r\n                                            ></Node>\r\n                                        );\r\n\r\n                                    })}\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n    getInitialGrid() {\r\n        const grid = [];\r\n        for (let row = 0; row < 20; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < 50; col++) {\r\n                const Node = this.createNode(col, row);\r\n                currentRow.push(Node);\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    };\r\n\r\n    createNode(col, row) {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.startCoordinates.row && col === this.state.startCoordinates.col,\r\n            isFinish: row === this.state.finishCoordinates.row && col === this.state.finishCoordinates.col,\r\n            distance: Infinity,\r\n            isWeight: false,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport class Node extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state =\r\n        {\r\n            extraClassName: this.props.isFinish\r\n                ? 'node-finish'\r\n                : this.props.isStart\r\n                    ? 'node-start'\r\n                    : this.props.isWall\r\n                        ? 'node-wall'\r\n                        : this.props.isWeight\r\n                            ? 'node-weight'\r\n                            : '',\r\n            visited: false,\r\n            pathAnimated: false,\r\n            isWall: this.props.isWall,\r\n            isWeight: this.props.isWeight,\r\n            isStart: this.props.isStart\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            const className = this.state.isWeight ? 'node-visited-weighted' : 'node-visited'\r\n            this.setState({\r\n                extraClassName: className,\r\n                visited: true\r\n            })\r\n        }, this.props.delay * 10);\r\n    }\r\n    switchPath() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName: 'node-shortest-path',\r\n                pathAnimated: true\r\n            })\r\n        }, this.props.isPath * 10);\r\n    }\r\n    beWeight() {\r\n        if (this.state.isWeight) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWeight: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-weight',\r\n                isWeight: true\r\n            })\r\n        }\r\n    }\r\n    beWall() {\r\n        if (this.state.isWall) {\r\n            this.setState({\r\n                extraClassName: '',\r\n                isWall: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                extraClassName: 'node-wall',\r\n                isWall: true\r\n            })\r\n        }\r\n\r\n    }\r\n    beFinish() {\r\n        this.setState({ extraClassName: 'node-finish', isStart: false })\r\n\r\n    }\r\n    beStart() {\r\n        this.setState({ extraClassName: 'node-start', isStart: true })\r\n    }\r\n    normalize() {\r\n        this.setState({ extraClassName: '', isStart: false, isFinish: false })\r\n    }\r\n    render() {\r\n        const {\r\n            col,\r\n            wallIt,\r\n            mousedownHandle,\r\n            mouseUpHandle,\r\n            row,\r\n            weightIt,\r\n            startIt,\r\n            normalize,\r\n            finishIt,\r\n\r\n        } = this.props;\r\n\r\n        if (this.props.isVisited && this.state.visited === false) {\r\n            this.switch()\r\n        }\r\n        if (this.props.isPath !== false && this.state.pathAnimated === false) {\r\n            this.switchPath()\r\n        }\r\n        return (\r\n            <div\r\n                id={`node-${row}-${col}`}\r\n                className={`node ${this.state.extraClassName}`}\r\n                onMouseDown={() => {\r\n                    if (this.props.startPressed) {\r\n                        this.beStart();\r\n                        startIt(row, col)\r\n                    } else if (this.props.finishPressed) {\r\n                        this.beFinish();\r\n                        finishIt(row, col)\r\n\r\n                    } else if (this.props.weightdown) {\r\n                        if (!this.props.isStart) {\r\n                            this.beWeight();\r\n                            weightIt(row, col);\r\n                        }\r\n                    } else {\r\n                        if (!this.props.isStart) {\r\n                            this.beWall();\r\n                            wallIt(row, col);\r\n                        }\r\n                    }\r\n                    mousedownHandle(row, col);\r\n\r\n                }}\r\n                onMouseUp={() => mouseUpHandle(row, col)}\r\n                onMouseOver={() => {\r\n                    if (!this.props.isStart && !this.props.isFinish)\r\n                        if (this.props.mousedown) {\r\n                            if (this.props.startPressed) {\r\n                                this.beStart();\r\n                                startIt(row, col)\r\n                            } else if (this.props.finishPressed) {\r\n                                this.beFinish();\r\n                                finishIt(row, col)\r\n\r\n                            }\r\n                            else if (this.props.weightdown) {\r\n                                this.beWeight();\r\n                                weightIt(row, col);\r\n                            } else {\r\n                                this.beWall();\r\n                                wallIt(row, col);\r\n                            }\r\n\r\n                        }\r\n                }}\r\n                onMouseLeave={() => {\r\n                    if (this.props.mousedown) {\r\n                        if (this.props.startPressed || this.props.finishPressed) {\r\n                            this.normalize()\r\n                            normalize(row, col)\r\n\r\n\r\n                        }\r\n                    }\r\n                }}\r\n            >\r\n            </div>\r\n        );\r\n    }\r\n}  \r\n","\r\nimport React, { Component } from 'react';\r\nimport Visualizer from './Visualizer';\r\nexport default class Wrapper extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            reset: false,\r\n            height: this.props.height,\r\n            width: this.props.width\r\n        }\r\n    }\r\n    reset() {\r\n\r\n        this.setState({\r\n            reset: true\r\n        })\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        if (this.state.reset) {\r\n            this.setState({ reset: false })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            !this.state.reset ? <Visualizer reset={() => this.reset()} width={this.props.width} height={this.props.height}></Visualizer > : null\r\n        )\r\n    }\r\n}","\r\nimport React, { Component } from 'react';\r\n\r\nexport default class HeapElement extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value,\r\n            width: this.props.width,\r\n            height: this.props.height,\r\n            color: this.props.color,\r\n            isSelected: this.props.isSelected,\r\n            toBeSwappedWith: this.props.toBeSwappedWith,\r\n            remove: this.props.remove\r\n        }\r\n\r\n    }\r\n    switch() {\r\n        setTimeout((toBeSwappedWith) => {\r\n            const value = this.state.toBeSwappedWith ? this.state.toBeSwappedWith.value : this.state.value\r\n            this.setState({\r\n                color: \"teal\",\r\n                value: value,\r\n                toBeSwappedWith: undefined,\r\n                isSelected: false\r\n            })\r\n        }, 500);\r\n\r\n    }\r\n    switchtoRemoved() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                value: undefined,\r\n                color: \"\",\r\n                remove: false\r\n            })\r\n        }, 500);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        let { value, width, height, color, isSelected, toBeSwappedWith, remove } = this.state\r\n        if (remove) {\r\n            color = \"red\";\r\n            this.switchtoRemoved()\r\n        }\r\n        if (isSelected && value !== undefined) {\r\n            color = \"blue\"\r\n            this.switch(toBeSwappedWith)\r\n        }\r\n        if (value === undefined)\r\n            color = \"\"\r\n        return (\r\n            <div style={{\r\n                width: `${width}px`,\r\n                height: `${height}px`,\r\n                \"backgroundColor\": `${color}`,\r\n                \"borderRadius\": \"200px\"\r\n            }}>{this.state.value}</div>\r\n        )\r\n    }\r\n\r\n}\r\n","import React, { Component } from 'react';\r\nimport './HeapBlock.css';\r\nimport { Col, Button, Container } from 'react-bootstrap';\r\nimport MinHeap from '../dataStructures/heap';\r\nimport HeapElement from './HeapElement';\r\n\r\nexport default class HeapBlock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            initialheap: [],\r\n            resizefactor: 1,\r\n            width: 120,\r\n            height: 100,\r\n            permitOverflow: true,\r\n            heap: new MinHeap(true),\r\n            actions: [],\r\n            selected: [],\r\n            swappedElements: [],\r\n            remove: false,\r\n            updateExternalArray: this.props.updateExternalArray\r\n        }\r\n    }\r\n    heapify(initialarray) {\r\n        const initialheap = [[{ value: initialarray[1], pos: 1 }]]\r\n        for (let i = 1; i < initialarray.length; i++) {\r\n            let lastelementchecked = false;\r\n            initialheap.push([])\r\n            for (let element of initialheap[i - 1]) {\r\n                initialheap[i].push({ value: initialarray[element.pos * 2], pos: element.pos * 2 })\r\n                initialheap[i].push({ value: initialarray[element.pos * 2 + 1], pos: element.pos * 2 + 1 })\r\n                if (element.pos * 2 === initialarray.length - 1 || element.pos * 2 === initialarray.length) {\r\n                    lastelementchecked = true\r\n                }\r\n            }\r\n            if (lastelementchecked) break;\r\n\r\n        }\r\n        return initialheap\r\n    }\r\n    sleep(milliseconds) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n    async fillTreeSystemic(array) {\r\n        for (let element of array) {\r\n            this.fillTree(element)\r\n            await this.sleep(3000)\r\n        }\r\n        this.setState({ array: this.state.array })\r\n        await this.sleep(1000)\r\n        for (let i = 0; i < array.length; i++) {\r\n            this.state.updateExternalArray(this.removeSmallest(), i)\r\n            await this.sleep(2500)\r\n        }\r\n\r\n    }\r\n    fillTree(number) {\r\n        // const array = this.state.heap.heap\r\n        let num = number ? number : Math.floor(Math.random() * 10)\r\n        let actions = this.state.heap.insert({ distance: num })\r\n        // const finalarray = this.heapify(array)\r\n        const initialarray = actions.shift().element\r\n        const initialheap = this.heapify(initialarray)\r\n        const level = Math.floor(Math.log2(initialarray.length - 1))\r\n        const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n        this.setState({ readyForNext: false, remove: false, heap: this.state.heap, actions: actions, initialheap: initialheap, selected: [initialheap[level][position]] })\r\n\r\n    }\r\n    removeSmallest() {\r\n        if (this.state.heap.heap.length > 1) {\r\n            let removal = this.state.heap.remove()\r\n            let actions = removal.actions\r\n            const initialarray = actions.shift().element\r\n            const level = Math.floor(Math.log2(initialarray.length - 1))\r\n            const position = (initialarray.length - 1) - (Math.pow(2, level) - 1) - 1\r\n            this.setState({ selected: [this.state.initialheap[level][position]], remove: true, actions: actions })\r\n\r\n            return removal.result.distance\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.array) {\r\n            this.fillTreeSystemic(this.props.array)\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        const element = this.element;\r\n        const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\r\n            element.offsetWidth < element.scrollWidth;\r\n        if (hasOverflowingChildren && this.state.permitOverflow) {\r\n            const resizefactor = this.state.resizefactor * 0.9\r\n            const width = resizefactor * 120\r\n            const height = resizefactor * 100\r\n            if (width <= 30) {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: 30, height: 27, permitOverflow: false })\r\n\r\n            } else {\r\n                this.setState({ resizefactor: this.state.resizefactor * 0.9, width: width, height: height })\r\n\r\n            }\r\n        }\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction) {\r\n            if (currentAction.action === \"swap\") {\r\n                let initialarray = currentAction.currentheap\r\n\r\n                const level1 = Math.floor(Math.log2(currentAction.element1))\r\n                const position1 = (currentAction.element1) - (Math.pow(2, level1) - 1) - 1\r\n                const level2 = Math.floor(Math.log2(currentAction.element2))\r\n                const position2 = (currentAction.element2) - (Math.pow(2, level2) - 1) - 1\r\n                let selected1 = this.state.initialheap[level1][position1]\r\n                let selected2 = this.state.initialheap[level2][position2]\r\n\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], swappedElements: [selected2, selected1], initialheap: initialheap })\r\n                }, 1000);\r\n\r\n\r\n            }\r\n            if (currentAction.action === \"remove\") {\r\n                let initialarray = currentAction.currentheap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        remove: false\r\n                    })\r\n                }, 1000);\r\n            }\r\n            if (currentAction.action === \"settle\") {\r\n                const initialarray = this.state.heap.heap\r\n                const initialheap = this.heapify(initialarray)\r\n                setTimeout(() => {\r\n\r\n                    this.setState({\r\n                        actions: this.state.actions,\r\n                        initialheap: initialheap,\r\n                        selected: [],\r\n                        remove: false\r\n                    })\r\n                }, 600);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return { contains: true, pos: i };\r\n            }\r\n        }\r\n        return { contains: false, pos: 0 };\r\n    }\r\n    render() {\r\n        const { width, height, initialheap, selected, swappedElements, remove, updateExternalArray } = this.state\r\n        const windowWidth = this.props.width\r\n        const windowHeight = this.props.height\r\n        let buttons = () => {\r\n            return (<div>\r\n                <Button variant=\"outline-info\" onClick={() => this.fillTree()}>\r\n                    Add to Heap\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.removeSmallest()}>\r\n                    Remove smallest number from Heap\r\n            </Button></div>)\r\n        }\r\n        if (updateExternalArray) {\r\n            buttons = () => {\r\n                return (<></>)\r\n            }\r\n        }\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>{buttons()}\r\n                < Container key={Math.random()} style={{\r\n                    width: \"100%\",\r\n                    display: \"inline-block\",\r\n                    overflowX: \"auto\",\r\n                    maxWidth: windowWidth - 100, maxHeight: windowHeight - 50, minWidth: windowWidth - 100, minHeight: windowHeight - 50, marginTop: '100px'\r\n\r\n                }\r\n                } ref={(el) => { this.element = el }}>\r\n\r\n\r\n\r\n                    {\r\n                        initialheap.map((row, rowIdx) => {\r\n                            let elements = []\r\n                            return (\r\n                                <div key={rowIdx} style={{\r\n                                    display: \"flex\",\r\n                                    flexDirection: \"row\"\r\n                                }}>\r\n                                    {\r\n                                        row.map((col, colidx) => {\r\n\r\n                                            if (col.value)\r\n                                                if (col.value.distance !== undefined) {\r\n                                                    col.value = col.value.distance\r\n                                                }\r\n                                            let isSelected = false\r\n                                            let toBeSwappedWith = undefined\r\n                                            for (let element of selected) {\r\n                                                if (element.pos === col.pos) {\r\n                                                    isSelected = true\r\n                                                    toBeSwappedWith = swappedElements.shift()\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                            let color = \"teal\"\r\n                                            if (col.value !== undefined)\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <HeapElement remove={remove && rowIdx === 0 && colidx === 0} key={colidx * Math.random()} color={color} value={col.value} width={width} height={height} isSelected={isSelected} toBeSwappedWith={toBeSwappedWith} ></HeapElement>\r\n                                                    </Col>)\r\n                                            else {\r\n                                                elements.push(\r\n                                                    <Col key={colidx} style={{\r\n                                                        display: 'flex',\r\n                                                        alignItems: 'center',\r\n                                                        justifyContent: 'center',\r\n                                                    }}>\r\n                                                        <div style={{\r\n                                                            width: `${width}px`,\r\n                                                            height: `${height}px`,\r\n                                                            \"backgroundColor\": \"\",\r\n                                                            \"borderRadius\": \"200px\"\r\n                                                        }}></div>\r\n                                                    </Col>)\r\n\r\n                                            }\r\n                                            return (<div key={colidx * Math.random()}></div>);\r\n                                        })}\r\n                                    {elements}\r\n                                </div>\r\n\r\n                            )\r\n\r\n                        })\r\n\r\n                    }\r\n\r\n                </Container >\r\n\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\n","export function bubbleSort(array) {\r\n    let actions = []\r\n    for (let i = 0; i < array.length; i++) {\r\n        let swapped = false;\r\n        for (let j = 0; j < array.length; j++) {\r\n            if (j + 1 === array.length) {\r\n                break;\r\n            }\r\n            if (array[j] > array[j + 1]) {\r\n                const currentArray = copy(array);\r\n                actions.push({ action: \"swap\", element1: j, element2: j + 1, currentArray: currentArray });\r\n                [array[j], array[j + 1]] = [array[j + 1], array[j]]\r\n                swapped = true\r\n            }\r\n        }\r\n        if (swapped === false) {\r\n            const currentArray = copy(array);\r\n            actions.push({ action: \"settle\", currentArray: currentArray });\r\n            return actions\r\n        }\r\n    }\r\n    const currentArray = copy(array);\r\n    actions.push({ action: \"settle\", currentArray: currentArray });\r\n    return actions\r\n}\r\nexport function copy(array) {\r\n    const newArray = []\r\n    for (let element of array) {\r\n        newArray.push(element)\r\n    }\r\n    return newArray\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport { ProgressBar } from 'react-bootstrap';\r\n\r\nexport default class ArrayElement extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            value: this.props.value,\r\n            isSelected: this.props.isSelected,\r\n            largestSoFar: this.props.largestSoFar,\r\n            variant: this.props.variant\r\n        }\r\n    }\r\n    switch() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                variant: \"info\",\r\n            })\r\n        }, 5);\r\n    }\r\n    render() {\r\n        const { value, isSelected, largestSoFar, variant } = this.state\r\n        let selectedVariant = variant\r\n        if (isSelected) {\r\n            selectedVariant = \"danger\"\r\n        }\r\n        let height = value / largestSoFar * 400\r\n\r\n        return (\r\n            <ProgressBar style={{ width: \"50px\", height: `${height}px`, transform: 'rotate(180deg)' }} variant={selectedVariant} now={100} label={value} />\r\n\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container, Col, Row, Button } from 'react-bootstrap';\r\nimport { bubbleSort } from '../algorithms/bubbleSort'\r\nimport ArrayElement from './ArrayElement';\r\nimport HeapBlock from '../heapVisualizer/HeapBlock';\r\n\r\nexport default class SortingVisualizer extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            array: [],\r\n            largestSoFar: -Infinity,\r\n            actions: [],\r\n            mergeSelected: [],\r\n            selected: [],\r\n            height: this.props.height,\r\n            width: this.props.width,\r\n            heap: false\r\n        }\r\n\r\n    }\r\n    async update(element, index) {\r\n\r\n        const array = this.state.array\r\n        array[index] = element\r\n        this.setState({ array: array, selected: [index] })\r\n        await this.sleep(500)\r\n        if (index === this.state.array.length - 1) {\r\n            this.setState({ heap: false, selected: [] })\r\n        }\r\n    }\r\n    clear() {\r\n        this.setState({ array: [], selected: [], mergeSelected: [], largestSoFar: [] })\r\n    }\r\n    fillArray() {\r\n        this.state.array.push(7, 6, 5, 4, 3, 2, 1)\r\n        this.setState({\r\n            array: this.state.array, largestSoFar: 7\r\n        })\r\n    }\r\n    sleep(milliseconds) {\r\n        return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n    }\r\n\r\n    addElementToArray() {\r\n        let element = Math.floor(Math.random() * 1000) + 1\r\n        this.state.array.push(element)\r\n        if (element > this.state.largestSoFar)\r\n            this.setState({ array: this.state.array, largestSoFar: element })\r\n        else {\r\n            this.setState({ array: this.state.array })\r\n        }\r\n    }\r\n    sort() {\r\n        const actions = bubbleSort(this.state.array);\r\n        this.setState({\r\n            actions: actions\r\n        })\r\n    }\r\n    merge(left, right, leftLimit, rightLimit, sorted, buffer) {\r\n        let i = left;\r\n\r\n        //Compare the two sub arrays and merge them in the sorted order\r\n        while (left < leftLimit && right < rightLimit) {\r\n            if (sorted[left] <= sorted[right]) {\r\n                buffer[i++] = sorted[left++];\r\n            } else {\r\n                buffer[i++] = sorted[right++];\r\n            }\r\n        }\r\n\r\n        //If there are elements in the left sub arrray then add it to the result\r\n        while (left < leftLimit) {\r\n            buffer[i++] = sorted[left++];\r\n        }\r\n\r\n        //If there are elements in the right sub array then add it to the result\r\n        while (right < rightLimit) {\r\n            buffer[i++] = sorted[right++];\r\n        }\r\n    }\r\n    async mergeSort(arr) {\r\n        //Create two arrays for sorting\r\n        let sorted = Array.from(arr);\r\n        let n = sorted.length;\r\n        let buffer = new Array(n);\r\n\r\n        for (let size = 1; size < n; size *= 2) {\r\n            for (let leftStart = 0; leftStart < n; leftStart += 2 * size) {\r\n\r\n                //Get the two sub arrays\r\n                let left = leftStart,\r\n                    right = Math.min(left + size, n),\r\n                    leftLimit = right,\r\n                    rightLimit = Math.min(right + size, n);\r\n                let selected = []\r\n                for (let i = left; i < leftLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                for (let i = right; i < rightLimit; i++) {\r\n                    selected.push(arr[i])\r\n                }\r\n                this.setState({\r\n                    mergeSelected: selected\r\n                })\r\n                await this.sleep(250)\r\n                //Merge the sub arrays\r\n                this.merge(left, right, leftLimit, rightLimit, sorted, buffer);\r\n                const currentState = []\r\n                let i = 0\r\n                for (let element of buffer) {\r\n                    if (element === undefined) {\r\n                        currentState.push(sorted[i])\r\n                    } else {\r\n                        currentState.push(element)\r\n                    }\r\n                    i += 1\r\n\r\n                }\r\n                this.setState({\r\n                    array: currentState\r\n                })\r\n            }\r\n\r\n            //Swap the sorted sub array and merge them\r\n            let temp = sorted;\r\n            sorted = buffer;\r\n            buffer = temp;\r\n\r\n        }\r\n        await this.sleep(500)\r\n        this.setState({\r\n            mergeSelected: []\r\n        })\r\n        return sorted;\r\n    }\r\n    async heapSort() {\r\n        this.setState({ heap: true })\r\n    }\r\n    componentDidUpdate() {\r\n        const currentAction = this.state.actions.shift()\r\n        if (currentAction)\r\n            if (currentAction.action === \"swap\") {\r\n                let selected1 = currentAction.element1\r\n                let selected2 = currentAction.element2\r\n                const currentArray = currentAction.currentArray\r\n                setTimeout(() => {\r\n                    this.setState({ actions: this.state.actions, selected: [selected1, selected2], array: currentArray })\r\n                }, 500);\r\n            } else if (currentAction.action === \"settle\") {\r\n                setTimeout(() => {\r\n                    const currentArray = currentAction.currentArray\r\n                    this.setState({ actions: this.state.actions, array: currentArray, selected: [] })\r\n                }, 500);\r\n            }\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return true\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    copy(array) {\r\n        const newArray = []\r\n        for (let element of array) {\r\n            newArray.push(element)\r\n        }\r\n        return newArray\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const { array, largestSoFar, selected, mergeSelected, heap } = this.state\r\n        let { width, height } = this.props\r\n\r\n\r\n        const space = (1 / array.length) * 100\r\n        let addon = () => {\r\n            return (<div></div>)\r\n        }\r\n\r\n        if (heap) {\r\n            const heaparray = []\r\n            for (let i = 0; i < array.length; i++) {\r\n                heaparray.push({ distance: array[i] })\r\n            }\r\n            addon = () => {\r\n                return (\r\n                    <HeapBlock width={width / 2} height={height / 2} array={array} updateExternalArray={(element, index) => this.update(element, index)}></HeapBlock>\r\n                )\r\n            }\r\n        }\r\n        return (\r\n            <div style={{\r\n                verticalAlign: 'top', display: ' inline-block'\r\n            }}>\r\n\r\n                <Button variant=\"outline-info\" onClick={() => this.fillArray()}>\r\n                    Fill Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.addElementToArray()}>\r\n                    Add to Array\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.sort()}>\r\n                    BubbleSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.mergeSort(this.state.array)}>\r\n                    MergeSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.heapSort()}>\r\n                    HeapSort\r\n            </Button>\r\n                <Button variant=\"outline-info\" onClick={() => this.clear()}>\r\n                    Clear\r\n            </Button>\r\n\r\n                < Container style={{ maxWidth: width - 100, maxHeight: height - 50, minWidth: width - 100, minHeight: height - 50, marginTop: '200px' }}>\r\n                    <Row>\r\n                        <Col>\r\n                            <Row>\r\n\r\n                                {\r\n                                    array.map((element, index) => {\r\n                                        let isSelected = false\r\n                                        let i = 0\r\n                                        for (let num of mergeSelected) {\r\n                                            if (element === num) {\r\n\r\n                                                element = mergeSelected[i]\r\n                                                isSelected = true\r\n\r\n                                            }\r\n                                            i = i + 1;\r\n                                        }\r\n\r\n                                        if (selected)\r\n                                            for (let element of selected) {\r\n                                                if (element === index) {\r\n                                                    isSelected = true\r\n                                                }\r\n                                            }\r\n                                        return (\r\n                                            <Col key={Math.random()} style={{\r\n                                                width: `${space}%`,\r\n                                                display: 'flex',\r\n                                                justifyContent: 'center',\r\n                                                transform: 'rotate(180deg)'\r\n                                            }}>\r\n                                                <ArrayElement key={index * Math.random()} value={element} largestSoFar={largestSoFar} variant={\"info\"} isSelected={isSelected}></ArrayElement>\r\n                                            </Col>\r\n\r\n                                        );\r\n                                    })\r\n                                }\r\n\r\n\r\n                            </Row>\r\n                        </Col>\r\n                        <div >{addon()}</div>\r\n                    </Row>\r\n                </Container >\r\n\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    return windowDimensions;\r\n}","import React from 'react';\nimport './App.css';\nimport Wrapper from './visualizer/Wrapper';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Button } from 'react-bootstrap';\nimport { LinkContainer } from 'react-router-bootstrap'\n\nimport {\n  HashRouter,\n  Route,\n} from \"react-router-dom\";\nimport HeapBlock from './heapVisualizer/HeapBlock';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer';\nimport useWindowDimensions from './hooks/windowSizeHook';\nimport Iframe from 'react-iframe'\n\nfunction App() {\n  const { height, width } = useWindowDimensions()\n  return (\n    <HashRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/pathfinding\">\n              <Button variant=\"outline-info\">PathFinding</Button>\n            </LinkContainer>\n\n            <LinkContainer to=\"/heapvisualization\">\n              <Button variant=\"outline-info\">HeapVisualization</Button>\n\n            </LinkContainer>\n            <LinkContainer to=\"/sortingvisualization\">\n              <Button variant=\"outline-info\">SortingVisualization</Button>\n\n            </LinkContainer>\n\n          </Nav>\n\n          <Button variant=\"outline-info\" onClick={() => { window.open(\"https://github.com/Amr-Aboelnaga/visualization\", \"_blank\") }}>Github Repo</Button>\n        </Navbar>\n\n        <div style={{ \"backgroundColor\": \"#282c34\" }}>\n\n        </div>\n\n        <header className=\"App-header\">\n          <Route\n            path='/heapvisualization'\n            render={() => (\n              <HeapBlock width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/pathfinding\"\n            render={() => (\n              <Wrapper width={width} height={height} />\n            )}\n            exact\n          />\n          <Route\n            path=\"/sortingvisualization\"\n            render={() => (\n              <SortingVisualizer width={width} height={height} />\n            )}\n            exact\n          />\n        </header>\n\n      </div>\n    </HashRouter >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}