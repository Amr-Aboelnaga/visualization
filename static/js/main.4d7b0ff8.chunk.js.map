{"version":3,"sources":["dataStructures/heap.js","algorithms/dijkstra.js","visualizer/Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["MinHeap","heap","this","set","Set","array","element","insert","num","has","push","add","length","index","distance","Math","floor","pop","smallest","left","right","temp","undefined","getNeighbors","node","grid","neighbors","col","row","filter","neighbor","isVisited","Visualizer","staticgrid","state","visitedNodesInOrder","nodesInShortestPathOrder","mousedown","a","obj","i","contains","pos","getInitialGrid","setState","oldgrid","startNode","finishNode","start","Date","getTime","unvisitedNodes","closestNode","remove","isWall","Infinity","previousNode","dijkstra","dur","console","log","currentNode","unshift","getNodesInShortestPathOrder","onClick","visualizeDijkstra","className","map","rowIdx","key","nodeIdx","isFinish","isStart","isPath","getIndex","wallIt","mousedownHandle","handleDown","mouseUpHandle","handleUp","delay","Component","currentRow","Node","createNode","props","extraClassName","visited","pathAnimated","setTimeout","switch","switchPath","id","onMouseDown","beWall","onMouseUp","onMouseOver","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d7b0ff8.chunk.js","sourcesContent":["export default class MinHeap {\r\n    heap = [];\r\n    constructor() {\r\n        this.heap = [null];\r\n        this.set=new Set(null)\r\n    }\r\n    constructHeap(array) {\r\n        for (let element of array) {\r\n            this.insert(element)\r\n        }\r\n    }\r\n    insert(num) {\r\n        if(this.set.has(num))return;\r\n        this.heap.push(num);\r\n        this.set.add(num)\r\n        if (this.heap.length > 2) {\r\n            let index = this.heap.length - 1;\r\n            while (this.heap[index].distance < this.heap[Math.floor(index / 2)].distance) {\r\n                if (index >= 1) {\r\n                    [this.heap[Math.floor(index / 2)], this.heap[index]] = [this.heap[index], this.heap[Math.floor(index / 2)]];\r\n                    index = Math.floor(index / 2);\r\n                    if (index === 1) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    remove() {\r\n        if (this.heap.length > 1) {\r\n            if (this.heap.length === 2) {\r\n                return this.heap.pop()\r\n            }\r\n            let smallest = this.heap[1]\r\n            this.heap[1] = this.heap.pop()\r\n            let index = 1\r\n            let left = index * 2;\r\n            let right = index * 2 + 1\r\n            if (this.heap.length === 3) {\r\n                if (this.heap[1].distance > this.heap[2].distance) {\r\n                    [this.heap[1], this.heap[2]] = [this.heap[2], this.heap[1]]\r\n                }\r\n            } else if (this.heap.length > 2) {\r\n                while (this.heap[index].distance > this.heap[left].distance || this.heap[index].distance > this.heap[right].distance) {\r\n                    if (this.heap[left].distance < this.heap[right].distance) {\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[left]\r\n                        this.heap[left] = temp\r\n                        index = left\r\n                    } else {\r\n                        let temp = this.heap[index]\r\n                        this.heap[index] = this.heap[right]\r\n                        this.heap[right] = temp\r\n                        index = right\r\n                    }\r\n                    left = index * 2;\r\n                    right = index * 2 + 1;\r\n                    if (this.heap[left] === undefined || this.heap[right] === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            return smallest;\r\n        } else {\r\n            return;\r\n        }\r\n\r\n    }\r\n}\r\n\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n\r\nimport MinHeap from \"../dataStructures/heap\";\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    let unvisitedNodes=new MinHeap();\r\n    unvisitedNodes.insert(startNode)\r\n    while (unvisitedNodes.heap.length>1) {\r\n        const closestNode = unvisitedNodes.remove();\r\n        // If we encounter a wall, we skip it.\r\n        if (closestNode.isWall) continue;\r\n        // If the closest node is at a distance of infinity,\r\n        // we must be trapped and should therefore stop.\r\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n        closestNode.isVisited = true;\r\n        visitedNodesInOrder.push(closestNode);\r\n        if (closestNode === finishNode) return visitedNodesInOrder;\r\n        const neighbors = getNeighbors(closestNode, grid);\r\n        for (const neighbor of neighbors) {\r\n          neighbor.distance = closestNode.distance + 1;\r\n          neighbor.previousNode = closestNode;\r\n          unvisitedNodes.insert(neighbor)\r\n        }\r\n      }\r\n  }\r\n  function getNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }\r\n  ","import {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport React, { Component } from 'react';\r\nimport './Node.css';\r\n\r\nconst START_NODE_ROW = 1;\r\nconst START_NODE_COL = 1;\r\nconst FINISH_NODE_ROW = 19;\r\nconst FINISH_NODE_COL = 49;\r\nexport default class Visualizer extends Component {\r\n    static staticgrid\r\n    constructor() {\r\n        super();\r\n        Visualizer.staticgrid=[]\r\n        this.state = {\r\n            grid: [],\r\n            visitedNodesInOrder: [],\r\n            nodesInShortestPathOrder:[],\r\n            mousedown:false\r\n        };\r\n    }\r\n    contains(a, obj) {\r\n        for (var i = 0; i < a.length; i++) {\r\n            if (a[i] === obj) {\r\n                return {contains:true,pos:i};\r\n            }\r\n        }\r\n        return {contains:false,pos:0};\r\n    }\r\n    getIndex(array,element){\r\n        if(array)\r\n        for(let i =0;i<array.length;i++){\r\n            if(array[i]===element){\r\n                return i\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    componentDidMount() {\r\n        const grid = getInitialGrid();\r\n        this.setState({ grid });\r\n        Visualizer.staticgrid=grid\r\n    }\r\n    visualizeDijkstra(){\r\n        const oldgrid=Visualizer.staticgrid\r\n        this.setState({oldgrid})\r\n        const {grid} = this.state;\r\n        const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n        var start = new Date().getTime();\r\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n        var end = new Date().getTime();\r\n        var dur = end - start;\r\n        console.log(dur)\r\n        this.setState({visitedNodesInOrder})\r\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n        this.setState({nodesInShortestPathOrder})\r\n        console.log(nodesInShortestPathOrder)\r\n    }\r\n     wallIt(row,col){\r\n        Visualizer.staticgrid[row][col].isWall=true\r\n    }\r\n    handleDown(){\r\n        this.setState({ mousedown: true });\r\n    }\r\n    handleUp(){\r\n        this.setState({ mousedown: false });\r\n    }\r\n    render() {\r\n        const { grid, visitedNodesInOrder,nodesInShortestPathOrder,mousedown } = this.state;\r\n        return (\r\n            <>\r\n                <button onClick={() => this.visualizeDijkstra()}>\r\n                    Visualize Dijkstra's Algorithm\r\n            </button>\r\n                <div className=\"grid\">\r\n                {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall,isVisited} = node;\r\n                    let isPath=this.getIndex(nodesInShortestPathOrder,node)\r\n                    if(!!isPath){\r\n                        isPath+=visitedNodesInOrder.length\r\n                    }\r\n                    return (\r\n                        <Node\r\n                          key={nodeIdx}\r\n                          col={col}\r\n                          isFinish={isFinish}\r\n                          isStart={isStart}\r\n                          isWall={isWall}\r\n                          row={row}\r\n                          isVisited={isVisited}\r\n                          isPath={isPath}\r\n                          wallIt={this.wallIt}\r\n                          mousedown={mousedown}\r\n                          mousedownHandle={() => this.handleDown()}\r\n                          mouseUpHandle={()=>this.handleUp()}\r\n                          delay={this.getIndex(visitedNodesInOrder,node)}\r\n                          ></Node>\r\n                      );\r\n                  \r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst getInitialGrid = () => {\r\n    const grid = [];\r\n    for (let row = 0; row < 20; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < 50; col++) {\r\n        const Node=createNode(col, row);\r\n        currentRow.push(Node);\r\n      }\r\n      grid.push(currentRow);\r\n    }\r\n    return grid;\r\n  };\r\n  \r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n      isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n    };\r\n  };\r\n\r\n\r\nexport class NodeElement{\r\n    col\r\n    row\r\n    isStart\r\n    isFinish\r\n    distance\r\n    isVisited\r\n    isWall\r\n    previousNode\r\n    constructor(col,row){\r\n        this.col=col\r\n        this.row=row\r\n        this.isStart= row === START_NODE_ROW && col === START_NODE_COL\r\n        this.isFinish= row === FINISH_NODE_ROW && col === FINISH_NODE_COL\r\n        this.distance= Infinity\r\n        this.isVisited= false\r\n        this.isWall= false\r\n        this.previousNode= null\r\n    }\r\n}\r\nNodeElement.prototype.valueOf = function () {\r\n    return this.distance;\r\n};\r\n\r\n  \r\nexport  class Node extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state= \r\n        {\r\n            extraClassName:this.props.isFinish\r\n        ? 'node-finish'\r\n        : this.props.isStart\r\n        ? 'node-start'\r\n        : this.props.isWall\r\n        ? 'node-wall'\r\n        :'',\r\n    visited:false,\r\n    pathAnimated:false,\r\n    isWall:this.props.isWall\r\n}\r\n    }\r\n    switch(){\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName:'node-visited',\r\n                visited:true\r\n            })\r\n        }, this.props.delay);\r\n        \r\n        \r\n    }\r\n    switchPath(){\r\n        setTimeout(() => {\r\n            this.setState({\r\n                extraClassName:'node-shortest-path',\r\n                pathAnimated:true\r\n            })\r\n        }, this.props.isPath);\r\n    }\r\n    beWall(){\r\n        this.setState({\r\n            extraClassName:'node-wall',\r\n            isWall:true\r\n        })\r\n    }\r\n    render() {\r\n      const {\r\n        col,\r\n        isFinish,\r\n        isStart,\r\n        isWall,\r\n        wallIt,\r\n        mousedownHandle,\r\n        mouseUpHandle,\r\n        row,\r\n        isVisited\r\n      } = this.props;\r\n     if(this.props.isVisited&&this.state.visited===false){\r\n         this.switch()\r\n     }\r\n     if(this.props.isPath!==false&&this.state.pathAnimated===false){\r\n        this.switchPath()\r\n     }\r\n      return (\r\n        <div\r\n          id={`node-${row}-${col}`}\r\n          className={`node ${this.state.extraClassName}`}\r\n          onMouseDown={()=>{ this.beWall();\r\n            wallIt(row,col);mousedownHandle()}}\r\n            onMouseUp={() => mouseUpHandle()}\r\n\r\n        //   onMouseEnter={()=>{if(this.props.mousedown){\r\n        //       this.beWall();\r\n        //       wallIt(row,col)\r\n        //   }\r\n        //   }}\r\n          onMouseOver={()=>{if(this.props.mousedown){\r\n            this.beWall();\r\n            wallIt(row,col)\r\n        }\r\n        }}\r\n          \r\n         ></div>\r\n      );\r\n    }\r\n  }  \r\n","import React from 'react';\nimport './App.css';\nimport Visualizer from \"../src/visualizer/Visualizer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Visualizer></Visualizer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}